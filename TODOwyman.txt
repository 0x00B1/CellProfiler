TODOwyman


Last updated: 10-15-2005

--- (Requested by Anne 9-08-05)
- Wyman, I just noticed in your email you mentioned having ideas for the GUI and features after playing with the code a bit.  I'd love to talk over your ideas when I get back in town!

---(Requested by Anne 9-06-05)
- Go through existing modules and towards the top, where we define CurrentModuleNumber, also specify ThisModuleName = 'IdentifyPrimAutomatic' (for example), and then adjust all the error dialogs to use that name, so that it's easier to maintain the code in the future - if we change a module name we do not have to go back through the code and find all instances of it, and we can copy error messages from one module to another without changing the module name.

- Move drawnow after each header

- Take out extra lines

Progress: do next -> LoadImages.m

---(Requested by Anne 8-24-05)
- All errors encountered within modules (and maybe also data/image tools, though I am not certain about that)
- should use: error(['Image processing was canceled in the ', ModuleName, ' module because *error msg*'])
- 
not: errordlg('error message goes here'), return

- We should check through the code and make sure errors are handled properly, and add this detail to the programming notes.

NEW PROJECT>>>
---(Requested by Anne 10-26-05)
- Create a CPretrieveimage subfunction to replace all the repetitive code at the beginning of each module that loads an image and does error checking.  The subfunction would look something like this:

Image = CPretrieveimage(handles,ImageName,ModuleName,ColorFlag,ScaleFlag,SizeFlag)
(Possibly add some more error checking Flags if there are other recurring things that we routinely check for.)

The subfunction would then contain code like this (taken from Align.m as an example):

%%% Checks whether the image to be analyzed exists in the handles structure.
if isfield(handles.Pipeline, ImageName) == 0
    %%% If the image is not there, an error message is produced.  The error
    %%% is not displayed: The error function halts the current function and
    %%% returns control to the calling function (the analyze all images
    %%% button callback.)  That callback recognizes that an error was
    %%% produced because of its try/catch loop and breaks out of the image
    %%% analysis loop without attempting further modules.
    error(['Image processing was canceled in the ', ModuleName, ' module because the input image could not be found.  It was supposed to be named ', ImageName, ' but an image with that name does not exist.  Perhaps there is a typo in the name.'])
end
%%% Reads the image.
Image = handles.Pipeline.(ImageName);


It would also contain error checking, like this:

%%% ScaleFlag == 1 means to warn the user if the image is outside the 0-1 range, but do not cancel processing.
if ScaleFlag == 1 
if max(Image(:)) > 1 || min(Image(:)) < 0
    CPwarndlg(['The images you have loaded in the ', ModuleName, ' module are outside the 0-1 range, and you may be losing data.'],'Outside 0-1 Range','replace');

end
%%% ScaleFlag == 2 means to cancel processing if the image is outside the 0-1 range.
elseif ScaleFlag == 2
if max(Image(:)) > 1 || min(Image(:)) < 0
    error(['Image processing was canceled because the images you have loaded in the ', ModuleName, ' module are outside the 0-1 range, and you may be losing data.'],'Outside 0-1 Range','replace');
end

end

There would also be error checking for COlor vs grayscale (taken from IdentifyPrimAutomatic for example):

%%% If ColorFlag == 0, don't do any checks.
%%% If ColorFlag == 1, check that the image is grayscale (= 2 dimensional).
if ColorFlag == 1
%%% Checks that the original image is two-dimensional (i.e. not a color
        %%% image), which would disrupt several of the image functions.
        if ndims(OrigImage) ~= 2
            error(['Image processing was canceled in the ', ModuleName, ' module because it requires an input image that is two-dimensional (i.e. X vs Y), but the image loaded does not fit this requirement.  This may be because the image is a color image.'])
        end
%%% If ColorFlag == 2, check that the image is color (= 3 dimensional).
elseif ColorFlag == 2
%%% TODO: put code in here to check whether the image is color (= 3 dimensional)
end

There would also be error checking that the image is a particular size.

%%% if SizeFlag == 0, don't do any checking.
%%% Otherwise, the incoming SizeFlag should be a numerical array containing the size the image ought to be.
if SizeFlag ~= 0 
	if size(Image) ~= SizeFlag
		error(['Image processing was canceled in the ', ModuleName,' module because the image is not the proper size.'])