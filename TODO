CellProfiler cell image analysis software development 
REARRANGED JANUARY 27th, 2005  IN ORDER OF PRIORITY

(+ sign indicates more challenging projects)
---------------------------------------------------

WANT IT NOW:

- Change File Renamer to work with a load images module rather than independently, so that we can rename every third file, for example, or rename based on existing text.

- Make measure windows expand to fit the number of lines of data that are produced. Maybe try using CPtextdisplaybox.m, which displays text using a slider so it's infinitely expandable.

- The menu often doesn't return to the default first position ('DataTools' or 'ImageTools') after running a tool.

- Update help for PlotSingleMeasurement.

- For the Export Mean Data DataTool, ask the user whether whether they want images or measurements as rows vs. columns (see ExportCellByCell for an example).

+++ When there are large numbers of images in a folder, the
       response of uigetfile is really slow.  Can fix? 

+++ Make a shape-based IdentifyPrim module which recognizes
       oblong/elliptical objects rather than perfectly round
       objects. Actually, adopt the current IdentifyPrimShapeIntens to
       take in an ellipticity factor which can be set to 1 for perfect
       circles or some other number for oblong objects.  There is a
       paper somewhere detailing an ellipse-based shape transform
       (maybe Ray has it?). 

- Surrounding many uses of CPimread in various modules and tools is some code asking about the specifications of DIB images, if that is the file format the user specified.  We should change CPimread to take in the file format of images as an optional argument.  If the file format = DIB, then CPimread should look in the handles structure to see whether the user already specified the length, width, channels, etc.  If so, it uses those values and tries to open the image (try/catch). If there is an error, it can ask the user to enter the values in the specifications dialog box and try again.  This will move the code asking about specifications out of each module or data tool and put it all in one place.  This will prevent the user from having to confirm the specifications every time the function is called and will remove the specifications dialog box code from each instance of the function being used.

- For the data/image tools: ShowDataOnImage and PlotOrExportHistograms (and possibly other tools and modules) there is a bug in matlab that prevents certain handles from properly being edited, I think only on the mac platform.  Right now if there a try/catch which yields an error message referring to Service Request 1-RR6M1 if the propedit command fails.  However, even *trying* propedit seems to cause CellProfiler to become unstable, and it seems to have to do with its interaction with X11. So we should somehow check to see what platform is running, and if it's X11 (or maybe just mac), not even try the propedit command. The best way to find all functions with this problem is to search for the service request number and/or for the propedit command.

- For the image tool OpenNewImageFile, the resulting figure should have the filename as its title.

---------------------------------------------------

WANT IT SOON (~ for next beta release, late February 2005):

- When viewing algorithms in the main GUI on the Mac platform, the down arrow should
       move from one highlighted algorithm to the next (right now, the
       dotted line highlighting moves but nothing happens).

- Adjust ModuleNames or VariableValues so that their dimensions match (if possible). E.g. the following example has 6 modules loaded, so it would make more sense if VariableValues was a 13 x 6 cell rather than 6 x 13, so that all four Settings have 6 columns.
Settings =      ModuleNames: {1x6 cell}
             VariableValues: {6x13 cell}
         NumbersOfVariables: [13 6 5 6 4 8]
    VariableRevisionNumbers: [2 0 1 0 1 1]

- Display data on image button: it currently is using global
       variables to store the numerical data, rather than using
       UserData.  Thus, the figure cannot be saved with the numerical
       data still accessible.  See histograms for how to use UserData
       to store the numbers with the figure. 

- When a figure has been produced by CellProfiler (either during the analysis run or by one of the ImageTools), and you choose File > Save As, the default directory for saving the figure is Matlab's current directory.  It would be nice if instead the directory were the default output directory. If this is not straightforward, abandon it, because it isn't a huge issue.

- Make the DIB cancel button work in CPimread.m > right now it gives a less straightforward error message when you choose cancel during an analysis run. I don't know how it responds during an ImageTool like OpenNewImageFile.m

- Make a module to expand or shrink secondary objects. (e.g. to define a membrane compartment). Test to be sure that downstream modules work on the newly defined region: measure, subtract from the original compartment, save images.

+++ Make a module to identify and count and measure objects
       within previously identified objects (e.g. nucleoli or
       organelles or speckles within nuclei or cells).  This also requires designing a way to store measurements of Subobjects. See MeasureNeighbors.m for an example of saving several measurements per object.  Need to also develop tools to export the Subobject measurements.

++ Histograms: allow fewer labels, plus fewer decimals (right now, it's either-or). 

- Add background subtraction to the identify sec distance module
       (make it optional in case a cell stain image is not
       available). 

- Be sure that all exporting tools will function properly if some
       measurement fields are left blank, which is the case when there
       are no objects in a particular image, for example.  I am pretty
       sure that export mean data and export cell by cell data will
       result in an error. Actually, ExportMeanData works fine on image sets where no objects were found as long as the last image set had at least one object. If the last image set does not have objects, then exporting only functions up to the last image set that *does* have objects, presumably because the columns of measurements have a shorter length.  Maybe solve by making sure that an [] empty cell is placed in each measurement position?  Not sure if that will fix it.

- For the ExportDataButton in CellProfiler.m, warn the user if
       'Image' and 'Imported' fields have different numbers of
       measurements - I am not sure how the exporting would work in
       this case.

- If there are no modules loaded in the main CellProfiler window pipeline, the Save Settings button should realize this and refuse to save a settings file: warndlg('There are no modules currently loaded, so the pipeline will not be saved.').

- For LoadImagesText module, make the error catching more descriptive.
       If there are no image files matching the specified text, right
       now it just says "there are no image files in the directory." when
       it ought to say "there are no image files in the directory that
       contain the text XXX."

- In MeasureCorrelation module, have the display window indicate whether the region analyzed is 'overall', or the name of the object within which correlation is measured. (that is, the contents of the last variable box).

- Add Image set # to the display for AlgAlign.m (see other displays for the precise format).

- Add this to the Open New Image File help: "The Open New Image File button shows
       pixel values in the range 0 to 1.  Images are loaded into
       CellProfiler in this range so that modules behave consistently.
       The display is set to the same range so that, for example, if a
       user wants to look at an image in order to determine which
       threshold to use within a module, the pixel values are directly
       applicable. "

- The Histograms tab at the lower part of the image is called Plot data, but seems to work as described in the manual. Change the manual (= help file) to match.

- The Normalization tab at the bottom of the window is called Data Layout and works differently from the Normalization described in the manual at page 17. Change the manual (= help file) to match.

- Make the help/manual prettier: For each example image that is just text, move it into the help for that file, because as it is these images are stretched a lot. 

[Do the following prior to releasing the new beta version:
- Smart Indent
- M Lint error checking
- Check for TODO's
- Test every module & button
- Especially, try canceling and closing & opening figure windows
- Prepare updated manual]

---------------------------------------------------

WANT IT BEFORE PUBLIC RELEASE (~ May 2005):

***********
+++ Make image tools more accessible/intuitive:
Create an image toolbar to replace the drop down menu in the main CP GUI 
- The toolbar should have a horizontal orientation due to the drop down menu
- One row of tiny icon-buttons for standard image tools
- Below that, a drop down menu for infrequently used/custom tools
- Below that, a 'status line' of text that indicates which image will be acted on, and any further instruction if necessary during the running of the tool.
- We want to be able to close/open this toolbar, so there should be a button in the main CP GUI to "Show Image toolbar".  The Image toolbar should be close-able, but probably the normal window-closing functions are adequate - it doesn't need a hide/cancel button I don't think.
- When clicking on any image, have the toolbar become active/come to the top of all other windows.

For standard image tools:
[including: SaveImageAs, OpenNewImageFile, ShowPixelData, ShowHistogram, SaveToMatlabWorkspace, ShowImageInNewWindow]
- Have tooltips appear upon mouse-over of each button that show the name of the tool 
- Convert the tools that Ola wrote in ImageTool_Callbacks.m into separate m-files and add them to the ImageTools folder.

For infrequently used/custom tools:
[ShowDataOnImage, any other .m file in the ImageTools folder]
- Have any .m file in the ImageTools folder that does not have its own button appear in a drop down menu below the icon buttons.
- Make the help within each tool accessible somehow: maybe a '?' button that then asks you to select the tool you want help on (by clicking its icon or choosing it in the drop down menu).

Other implementation notes:
- replace imagesc throughout all CellProfiler, Modules, and Tools code with a new function to go in the main CellProfiler directory: CPimagesc.m, which should include this code:
ImageHandle  = imagesc(Image);
set(ImageHandle,'ButtonDownFcn','ImageTool(gco)')
This will be a simple string replacement of imagesc > CPimagesc to convert all the modules & tools, and it will be more fool-proof for when people write new code.  It might also give us the flexibility later on to do things like set other settings (like aspect ratio or font size) for every new axis produced.
- Possibly add DataTools to the same toolbar, just have it divided in half?
************

- OpenNewImageFile (one of the ImageTools) has a uigetfile command at the beginning which on the mac platform filters the directory's contents for All Matlab files, rather than all files.  This is sort of a buggy feature of matlab, so we'd like to figure out a workaround that allows us to use the uigetfile command with the filter turned off so that all files are visible/selectable.

+++ Restructure CellProfiler.m so that the GUI creates a configuration file which is then sent to a simple pipeline program. That would make farming out jobs to multiple machines easier, running a job that broke somewhere, and it would make it easier to create new GUIs aimed at different tasks, if people wanted to. The current GUI wouldn't actually need to change, it could still call the pipeline-running-function and parse errors from it (which is a definite good thing to keep around).   It would be entirely under the hood.

STEVE IS WORKING ON THIS >>> 
+++ Download code relating to Perlman, Mitchison, et al. Science
       2004 and make modules accordingly (Laplacian of Gaussian to
       identify nuclei) 

- When attempting to Export data using any of the various
       buttons, add an error check in case the mat file does not
       contain the field "Measurements". 

- In the SetPreferences button, fix the code for when the user does not have write access to the matlab root directory. There is a nice routine almost functional there, but it doesn't quite seem to do the right thing: try to write in matlab root first, and if that fails, write in the handles.Current.StartupDirectory) > Also, maybe we should change it so that the current directory it tries to write to is the handles.Current.default output directory, since presumably the user can write there.  That is where CellProfiler should look when trying to load the preferences upon launching, too, if we add this feature.

- In the SetPreferences button in CellProfiler.m, do some error checking to see whether items entered in edit boxes are valid.  For directories, check whether the directory exists and warn the user if it does not (although, still let the nonexistent directory be saved, because perhaps they are not connected to the network or something). For the default output directory, check whether the user has write permission to that directory and warn if not.  For the pixel size and font size, check whether the entry is a number (though I think it needs to be stored as a string within a cell) and revert to the previously saved value if it is not a number.

- Whenever anything is saved to the hard drive, add an error
       check to see whether the user has permission to write to that
       location (esp. CellProfiler.m and AlgSaveImages.m). From within the target directory, run:
       [ignore,Attributes] = fileattrib, if Attributes.UserWrite == 0,
       then error(INSERT PROPER ERROR STUFF HERE), end 

- Add error checking to data-related buttons to determine whether
       the .mat file the user selected is a valid CellProfiler output
       file.

- For the ExportCellByCell button in CellProfiler.m, add an error
       check when exporting "All measurements" to notify the user when
       that image had no objects.  If there are no objects, the export
       should be canceled.

- When clicking on a module in the list box whose .m file no longer exists in the Modules directory, an error pops up saying the module no longer exists but that the settings will be shown anyway.  The settings are *not* shown in the window, because an error appears in the command window - undefined variable "flagExist" at line 1066.

- When viewing an algorithm in the pipeline and the corresponding module's .m file no longer exists in the Modules directory, there is a nice error catch and popup message, but it fails to display the current settings and yields this error at the command line:
??? Undefined function or variable "flagExist".
Error in ==> CellProfiler>ModulePipelineListBox_Callback at 1062
  if ( ( length(VariableValuesString) > 13) | (flagExist))

- For the ExportDataButton in CellProfiler.m, see the line marked
       TODO, where the three separate Fieldnames variables should be
       combined into one prior to running the for loops that follow,
       for the sake of simplicity and speed.

- Use the User's preference for font size for all figure displays and dialog boxes.  Do this by adding this line:
	FontSize = get(0,'UserData');
After the line in the DISPLAY RESULTS section:
if any(findobj == ThisModuleFigureNumber) == 1
And then, for each subplot or text window, add this line:
    set(gca,'FontSize',FontSize)
For each title, add properties at the end:
    title('Original Image', 'FontSize', FontSize)
Also, ask Ola whether we should take out the old method of finding the preferred font size, which was FontSize = handles.Current.FontSize;  I would guess we probably should remove that to make it more consistent throughout the code.

- CellProfiler.m keeps track of time elapsed, broken down for each module, and has a display pop open at the end of a pipeline showing how long the first image set took and how long subsequent sets are taking.  Right now, the time is shown for *every* image set, whereas we only want two columns: the first image set, and then subsequent sets all averaged together.

- Allow canceling from the first dialog box when using the Save Image As button.

++ Prevent clicking pause/cancel buttons twice in the timer window.

- Have image windows pay attention to aspect ratio of images.

- Save Image As tool: does not work well for all kinds of
       displayed images (e.g. The mean image produced by correct illum
       divide all mean comes out weird). Test it with a bunch of image outputs and make it more compatible.

- Make all pop-up windows use the proper background color and
       come to the center of the CP window (helpdlg, warndlg, msgbox):
       requires getting the handle then setting the color and
       position. Also, for the variablerevisionnumber window, set colors appropriately.

- Export mean data button: currently, if you enter a filename
         in use, it warns you and then cancels the export. Instead,
         the user should be warned and given two options: overwrite,
         or enter a different name.  For an example of this, see the
         use of "while" in the PreviewAndSaveColumnOfSampleInfo
         subfunction in CellProfiler.m

JAMES MIGHT HAVE DONE SOME OF THIS >>>> - Plot data button: allow adding error bars reflecting stdev or
       sem to the single parameter, multiple images bar plot (matlab
       central has error bar code). 

- Plot data button: allow displaying two parameters vs. each
       other in a scatter plot. 

- Combine CorrIllumDivideAll with RetrieveImg version.

- Compressed histograms: Add Y sample labels, allow to show
       relative brightness, allow to put in order by mean, change # of
       sig figs.  See hist2 at MC to smooth histograms.  Eventually
       allow histograms to be interactively updated? See automatic
       updated plot at MC, and also fancyplot.  

- Spot Identifier: Figure out Excel mac vs Pc problems (Anne has
       an email from Mathworks describing the issue, thread QW38).
       Allow asking if numbers are in rows or columns.  Check offsets,
       flipping. Display value only when clicking (see email that Anne
       has: Mathworks tricks for interactive figures). Make manual
       page. Toggle several images. 

- Image Tiler: Main GUI's error catching is causing problems when
       sample info is loaded.  Allow zoom in on thumbnail: get
       filename (GET COORDINATES) and display high res image.  Needs
       error catching for images to be the same size.  Display window
       stays open. See tooltips code. Make manual page.  Fails if
       there are fewer images than the total grid. 

- For the ExportMeanData datatool, display a window with every value that is going to be exported, each one next to a checkbox.  As default, have all checkboxes checked and allow the user to deselect measurements they do *not* want to export.  Might be nice to have a couple of buttons: 'select all' 'deselect all'.

- Develop a good graphical interface for exporting data (using the GUI builder in Matlab) for the exportation of data and measurements to different formats.  Allow to choose whether to export Mean, median, stdev cellbycell, row vs. column, tab delimited vs. csv vs. Excel format.  Note: for exporting mean, median, and stdev, these values should be calculated on the fly rather than extracted from existing measures in handles.Measurements, so that we can eliminate storing these values in output files.

- Make a quality-control button that checks results from an output file for evenness of illumination, linearity of exposure time, lamp flickering, and slide-scale variation. (Based on whatever Ray decides is useful).

- Make another primary object identification module based on
       Intensity then distance. 

- There is no way to save images which are normally calculated
       for display only when running on the cluster, because the
       figure windows are not open so the calculations are skipped. (maybe this won't be used often enough to matter.)

- Many modules that load images from the hard drive use a subfunction called RetrieveImageFileNames, but it's slightly different when used in different contexts. It would be nice to consolidate at least part of this function into a standalone subfunction.  This allows people to change something like which file extensions are ignored in the one subfunction rather than every individual module.

- We should change the Identify modules and the SaveImages module so that if the user has chosen to save a label matrix image, the user has a choice between saving the grayscale label matrix (in which case they should be warned if they have more than 256 objects and if saving in 8 bit format), or a colored version, created using label2rgb on the spot in the SaveImages module rather than having the colored version saved to the handles structure by the Identify modules, which requires Variables in the Identify modules asking the user if they might want to save the images later in order to save processing time.

- Fix interactive zoom button (within Show Image button):
         (1) It seems to always work OK the first time you click on
     Interactive Zoom.  The subsequent times you click on it though:
     sometimes it works just fine and other times there is no change
     to the image itself - it stays at fully zoomed out and doesn't
     respond to mouse clicks.  Perhaps related, sometimes lots of
     errors are spit out at the command line (I think only on
     subsequent tries to use the functionality).  Actually, maybe it
     has something to do with having other figure windows open at the
     same time? 
         (2) Once things are working, I would like to add this
     Interactive Zoom button to several other places: In
     CellProfiler.m: "Display data on image", "Show pixel data", and
     all of the figure display windows (for each algorithm - I am not
     sure whether buttons will stay intact, though, once each
     algorithm runs. so I am not sure whether it makes more sense to
     have the button added within each algorithm's code or within the
     main CellProfiler code when the window is first created). The
     most important thing is to add the button to "AlgImageTiler.m";
     that is why I acquired this code in the first place.-
     Calculations for display purposes only: surround by an if that
     is: "If figure window is open OR saveimage = Yes, then do these
     calculations." 

- Test and annotate in each module's help which modules work for grayscale vs color images.

- 'Fetch new modules from website' button in CellProfiler's main GUI. 

- 'Report bug' button in CellProfiler's main GUI.

- Have the save settings function automatically add SET to the
       name > can't currently do it with uisave. 

- Would like to be able to sort images and data points to
       generate hit lists meeting certain criteria. - showregions at
       Matlab Central might be useful for interactivity 

- Would like to be able to transform data; e.g. normalize for
       slide-scale variation, calculate the percent of cells in each
       image meeting certain criteria.

- Make an image sorter to take an incoming image and break the
       loop if the image does not meet particular conditions
       (e.g. maximum pixel intensity is below a certain
       brightness).  This might also mark the images somehow in the
       Measurements.

- Make a module using code from ImageJ
       http://rsb.info.nih.gov/ij/plugins/ called Segmentation using
       k-means clustering.

[Do the following prior to releasing the public version:
- Make reference sheet with short descriptions of the modules.
- Make "applications" technical notes and automatic settings
       files to give a good starting place for common applications
       (e.g. cell count, yeast colony count, staining intensity, cell
       cycle, nuclear/cytoplasmic translocation) and for common cell
       types. 
- Design an informational brochure
- Make a tutorial to demonstrate how CP is used.]

---------------------------------------------------

POST-PUBLIC RELEASE SUPPORT:

     - Monitor imaging newsgroups and inform people about the software
     - Provide technical support/help desk
     - Fix bugs
     - Maintain for new releases of OS's and Matlab
     - Check Matlab Central for useful code to incorporate into
       CellProfiler or its modules (last checked on 9-16-04:
       Biotech/medical, Graphics (all 3 categories), Image Processing,
       Utilities - GUI Tools & examples, and Misc.) 
     - Organize training workshops
     - Present at conferences

---------------------------------------------------

WANT IT SOMEDAY:

- All modules: look for speed improvements (esp. imresize?)

+++ To aid in interactive selection of settings, allow user to
       create a figure window where images can be dragged and overlaid
       and toggled back and forth. See Inca and dragndrop in Matlab
       Central.

+++ Allow data to be exported to bioinformatics programs like GGOBI,
       Spotfire, or GenePattern. (Still trying to decide the best format).

+++ Allow data to be exported in MAGE format to go into databases.

+++ Allow data to be exported to Open Microscopy Environment
       databases.  (Being worked on by Tony Scelfo in Peter Sorger's lab).

+++ Port to python so we don't need to use Matlab anymore

+++ Try to get code for yeast segmentation from this paper, and
       incorporate it into CellProfiler: SCMD: Saccharomyces
       cerevisiae Morphological Database. Nucleic Acids Res. 2004 Jan
       1;32 Database issue:D319-22. PMID: 14681423  
Perhaps more promising is the paper Coelho, M, Ferreira et al, Applied Microbial and Cell Physiol, 2004, where they mention having Matlab code to accomplish yeast cell segmentation (Anne has this paper).

+++ Would like to be able to nicely graph data (Matlab is a bit
       limiting at this point in time) and click on data points to
       retrieve the high resolution image. 

+++ Make a user-scoring module that allows the user to view and
       annotate each image manually. Show control side by side (1-4 at
       a time) and add that assessment to the data structure. Maybe
       allow randomizing (to do blind tests). Allow clicking
       through. Could also be used just for viewing images (e.g. every
       third image in a gigantic image set).  Whether the file name
       and/or sample info is shown should be optional. 

- 'Start job midway' module, run image set #XXXX (allow putting
       in a bunch of comma-delimited numbers to allow random), every
       50th. 

+++ Binucleate cells: figure out how to identify and count them

+++ Make modules to identify objects in transmitted light/DIC images.

+++ Align/resize stack of images (like yeast plates). See Matlab
       demo on image registration. Did Chris already do this? 

+++ Neurite outgrowth module

+++ Particle tracking over time module

---------------------------------------------------

DONE DURING IAP>>>>>>>

     -Done- Make the help button next to the image/data tools work.  It should pop open a listbox asking you to choose which tool's help you would like to see, and then it should extract the help from the tool's m-file.  The listbox should also give general help, i.e. "You can add your own tools by writing Matlab m-files, placing them in the ImageTools or DataTools folder, and restarting CellProfiler."

     -Done- When adding a module to the pipeline, check to see whether more than one function with that name exists on the Matlab search path. If so, warn the user, tell the user which pathname to the function will most likely be used, but warn them that this may change if the path is changed by adding modules from another directory.  Suggest that if the module has the same name as a Matlab function, they should consider renaming the module to prevent confusion.

     -Done- When adding a module to the pipeline, CellProfiler checks in a fairly rudimentary way whether it is a valid CellProfiler module and warns the user. However, the module is then half-loaded so nothing works properly and you have to restart CellProfiler. This checking should be more sophisticated, and should recover by not loading the module at all.

     -Done- In CellProfiler.m, check whether the guidata lines are necessary (marked with a TODO).  (They were unnecessary)

     DONE!! - Allow the Save Images module to deal with different bit depths, in case the user wants to save images in 16-bit (e.g. with PNG or JPG). Also allow the user to save an image as a binary (black/white rather than grayscale, so that any nonzero pixels = 1, most useful for viewing a label matrix).

     -Almost done- Timer: Have the time for first set separate from the time for
       subsequent sets. 

     -Done- Make progress bar windows go away when using the close all figures and timers button (e.g. Correct illum modules).

     - done Have LoadSettings button determine whether a file is a valid Settings file.

    - Done "Make projection" module (= average, get code from DivideAllMean). 

     -Done-   adjusted the Show data on image button or the Show image button
       to load DIB images. Also need to adjust any other modules
       that use imread, including those which open all the images to
       calculate something, like CorrectIllum All modules and probably
       IdentifyPrimThreshold and ApplyThreshold (when the threshold is 
       automatically calculated).  Also, DIB's are currently being read
       upside down - need to flip them (flipud).

Done     - Throughout CellProfiler and its modules, remove unnecessary updating of the handles structure (guidata function).

DONE AFTER IAP >>>>
-------------------
Done, I think - The error checking for "there are no images in this folder"
       should be moved out of CellProfiler.m and into the two Load
       Images modules, since some pipelines may not require images in
       order to run properly.
Done - - The confirmation window upon "cancel after image set" button clicking ought to say "confirm cancel", not "confirm close". 

Done (Anne) - Fix CreateBatchScripts, for the option of selecting the default module directory by entering "."  Things were changed recently to add CellProfiler and CellProfiler/Modules to the path, and I am not sure whether this option will still function.

Done (Anne) - In CellProfiler.m, look for lines marked: %%% TODO: Fix filename construction (I think also see lines pertaining to OutputFileOverwrite), and use a less platform-dependent way to construct the path/filenames (e.g. with Matlab's fullfile function), rather than using slashes.

Done (James and Anne) - Remove all 'cd' commands from modules and use full pathnames instead.  In particular, modules that need to look at all the images in a set (Load images, identifythreshold, correctillum, subtract background) typically change to the directory then read the images, whereas we could construct the image filename using fullfile(pathname,filename). (The reason for doing this is to prevent CellProfiler from unexpectedly changing the current directory in matlab.  However, if this method takes more processing time, perhaps we should not make this change).

Done (Anne, with Kyle writing the Help) - Load movies module, with ability to load each frame of a .avi file.  (Look at AvitoImageSlices.m)

- DONE, Delimiter was not functioning on anne's computer, but it seems to work now.- Allow the user to 'export' the current settings into some nice, person-readable text file so they have a permanent record. 

DONE (Anne - SpeedUpCellProfiler module): - Change saving of the output file to be faster for large jobs -> tell the user they can change CP.m code to save only if handles.Current.SetBeingAnalyzed is a multiple of 5 or 10 or whatever, rather than saving after every image set.

Steve Lowe fixed the following:
2/25/05
- Help function does not work for ImageTools and DataTools; The menu often doesn't return to the default first position ('DataTools' or 'ImageTools') after running a tool.
First problem was a partially deleted string defining okcallback. Second problem may have been fixed by someone else, seems to work ok.

3/08/05
Fixed title bar label for Data Tools Help (previously said Image Tools Help).

Changed Image and Data Tools Help windows so that double clicking in list box will display help for the tool, same as clicking OK button.

In PlotOrExportHistograms, fixed problem that filenames containing underscores were not displayed properly as histogram titles (displayed succeeding character as subscript).

3/15/05

- Improve the Data tool "PlotOrExportHistograms":
*Make the dialog box that asks for input from the user (~13 questions) wider.
*When filenames have underscores and these filenames are used to label each histogram in the display, the underscores cause the following text to be subscripted. We fixed this somewhere else in the code at one point by doing a string replacement of underscores with some symbol that prevents the underscore from being read as a string modifier. 
*Flip rows vs columns for exporting the raw histogram data, so that columns are histogram bins and rows are images. Now have option to display in either orientation.
* Update help for this tool.

4/12/05
- Created new module IdentifyPrimLaplacianOfGaussian. Functions, but need to verify that it is doing as well as Perlman and Mitcheson's work.
- Added ability to restart a partially completed run, using module Restart.m. TODO: small mods to 45 modules that check SetBeingAnalyzed == 1 and take some global action, some of these may need to be changed to SetBeingAnalyzed == StartingImageSet.
-Made "Close Windows" button work better by labeling figures that CellProfiler creates.
