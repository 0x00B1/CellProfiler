CellProfiler cell image analysis software development 
JULY 28, 2005  IN ORDER OF PRIORITY

- Remove the code for rotating an image from the SpotIdentifier module and make it into a separate image processing module "RotateImage". There should be several methods to choose from in a popup menu:
1. Type in a set of pixel coordinates for two points that should be aligned horizontally.
2. Type in a set of pixel coordinates for two points that should be aligned vertically.
3. Click spots that should be aligned horizontally with mouse 
4. Click spots that should be aligned vertically with mouse 
5. Type in the rotation in units of degrees.
6. Automatic, based on identified objects - this would be a new, sophisticated option where identified objects that look like they're in a grid or some sort of lines would be rotated to be squared up to the image. Not sure if this is feasible, but it would be cool. We can make this a more long-term part of the project.
All of these options would be converted to a single number - degree of rotation - so the same code can then be used to actually rotate the image no matter which option was chosen.  This degree of rotation (or however you want to store it) should be saved in handles.Measurements.Image because it may be of interest to the user and also so that it can be retrieved in case you want to apply the rotation from the first image set to subsequent sets (see next option).

Another option - do you want the rotation for the first image to be applied to all image sets or do you want to determine the rotation for each image individually as you cycle through? 

Another option - do you want to crop away the rotated edges?  (Otherwise, the rotated edges with missing pixel information are just black pixels).

- Once all these changes are done (removing the text data and the image rotation from SpotID'er), then we want to combine IdentifyWellSpots and SpotIdentifier into a single module: IdentifyGridOfObjects.  Here's what the variables ought to be (you'll need to change the syntax for a lot of them because I cut & pasted them):

newVAR = Do you want the grid of objects to be found automatically or do you want to specify the grid manually?  In manual grid mode, you mark a known location in the grid and have the rest of the positions calculated from those marks, no matter what the image itself looks like.  In automatic mode, you must previously have run an Identify module to do a rough identification of the objects which is used to automatically find the grid.
%choiceVAR02 = Automatic grid
%choiceVAR02 = Manual grid
%inputtypeVAR01 = popupmenu

newVAR = For automatic grid mode, what did you call the roughly identified objects?
[popupmenu of objects]

%textVAR01 = What did you call the grayscale image to be used in this module? If you choose display mode, this is the image that will be overlaid with the identified grid of objects.  If you choose manual mode, this will specify the size of the image on which the grid of objects will be placed.  If you are using automatic grid mode and display mode, this grayscale image must be the same size as the image used to identify objects. If you are using automatic grid mode and non-display mode, you do not absolutely need to select an image here because the identified objects themselves specify the size of the image on which the grid will be identified.
%infotypeVAR01 = imagegroup
ImageName = char(handles.Settings.VariableValues{CurrentModuleNum,1});
%inputtypeVAR01 = popupmenu

%textVAR04 = What do you want to call the objects identified by this module?
%infotypeVAR04 = objectgroup indep
%defaultVAR04 = Spots
ObjectName = char(handles.Settings.VariableValues{CurrentModuleNum,4});

newVAR = Do you want to show the results in a display window?
Yes
No

%textVAR11 = For numbering purposes, is the first spot at the Left or Right?
%choiceVAR11 = Left
%choiceVAR11 = Right
LeftOrRight = char(handles.Settings.VariableValues{CurrentModuleNum,11});
LeftOrRight = LeftOrRight(1);
%inputtypeVAR11 = popupmenu

%textVAR12 = For numbering purposes, is the first spot at the Bottom or Top?
%choiceVAR12 = Top
%choiceVAR12 = Bottom
TopOrBottom = char(handles.Settings.VariableValues{CurrentModuleNum,12});
TopOrBottom = TopOrBottom(1);
%inputtypeVAR12 = popupmenu

%textVAR13 = Would you like to count by rows or columns?
%choiceVAR13 = Rows
%choiceVAR13 = Columns
RowsOrColumns = char(handles.Settings.VariableValues{CurrentModuleNum,13});
%inputtypeVAR13 = popupmenu

newVAR = Do you want the objects to be (1) circles with a particular diameter (see next option), (2) rectangles that fill the entire grid you have defined or (3) retain their natural size and shape (automatic grid mode only)?
choiceVAR = circles
choiceVAR = rectangles
choiceVAR = natural shape & size
[[We don't currently have the rectangle or "natural shape" options. Not sure how useful the rectangle option will be, we can wait on implementing it. The natural shape one will definitely be useful eventually. In this case, we simply want to 'polish up' the objects that have been identified in the previous identify module - we should basically superimpose the gridlines onto the identified objects to divide objects that span two grid rectangles and if there is more than one object within a grid rectangle we should merge all objects within the grid rectangle together. If there is no object within a particular grid rectangle, we don't want to create one there, but we still need to force the numbering system to remain properly lined up with the other spots. As a result, some numbers in the label matrix will be missing - I am not sure if this will cause downstream problems so a temporary fix might be: if there is no object within a particular grid rectangle, set the central one pixel to be the object.  The user will know that if the area of an object = 1 pixel then an object was not actually found]].

%textVAR05 = For circle mode, what is the diameter [[Note, I have changed this to diameter rather than radius]] of each object, in pixels?  This cannot be set to automatic if you are using manual grid mode.
%defaultVAR05 = 80
RadiusSize = char(handles.Settings.VariableValues{CurrentModuleNum,5});
should be popupmenu custom, with these options:
'Automatic' 
'Custom...'
[[We might add an option eventually 'Maximum size that still fits in the grid' - not sure if it would come in handy that often, though.]]

%textVAR07 = Enter the number of rows, columns
%defaultVAR07 = 40,140
RowsColumns = char(handles.Settings.VariableValues{CurrentModuleNum,7});
%%% Extracts the rows and columns from the user's input.
try
    RowsColumnsNumerical = str2num(RowsColumns);%#ok We want to ignore MLint error checking for this line.
    NumberRows = RowsColumnsNumerical(1);
    NumberColumns = RowsColumnsNumerical(2);
catch error('Image processing was canceled because your entry for rows, columns in the Spot Identifier module was not understood.')
end
[[[Can this be automatic if we are in automatic mode?]]]

%textVAR08 = For manual grid mode, enter the spacing between rows, columns (vertical spacing, horizontal spacing).
%defaultVAR08 = 57,57
HorizVertSpacing = char(handles.Settings.VariableValues{CurrentModuleNum,8});
%%% Extracts the vertical and horizontal spacing from the user's input.
try
    HorizVertSpacingNumerical = str2num(HorizVertSpacing);%#ok We want to ignore MLint error checking for this line.
    VertSpacing = HorizVertSpacingNumerical(1);
    HorizSpacing = HorizVertSpacingNumerical(2);
catch error('Image processing was canceled because your entry for the spacing between rows, columns (vertical spacing, horizontal spacing) in the Spot Identifier module was not understood.')
end
[[[We might add an option here where you click on two control spots (top left & bottom right or top right and bottom left) and the spacing is automatically determined, but it's a bit unlikely to be used that often.]]]

%textVAR06 = For manual grid mode, you must specify the location of a control spot - do you want to enter the pixel coordinates or click with a mouse? 
%choiceVAR06 = Coordinates
%choiceVAR06 = Mouse
MarkingMethod = char(handles.Settings.VariableValues{CurrentModuleNum,6});
MarkingMethod = MarkingMethod(1);
%inputtypeVAR06 = popupmenu

%textVAR09 = For manual grid mode, will you be specifying the distance (the next option) in units of pixels or spots?
%choiceVAR09 = Pixels
%choiceVAR09 = Spots
SpacingUnits = char(handles.Settings.VariableValues{CurrentModuleNum,9});
%inputtypeVAR09 = popupmenu

%textVAR10 = For manual grid mode, enter the distance from the control spot to the center of the top left spot of the grid (vertical, horizontal). Enter 0,0 if the control spot *is* the top left spot of the grid.
%defaultVAR10 = 57,0
HorizVertOffset = char(handles.Settings.VariableValues{CurrentModuleNum,10});
%%% Extracts the vertical and horizontal offset from the user's input.
try
    HorizVertOffsetNumerical = str2num(HorizVertOffset);%#ok We want to ignore MLint error checking for this line.
    VertOffset = HorizVertOffsetNumerical(1);
    HorizOffset = HorizVertOffsetNumerical(2);
catch error('Image processing was canceled because your entry for the distance from the top left marker to the center of the nearest spot (vertical, horizontal) in the Spot Identifier module was not understood.')
end
if strcmp(SpacingUnits,'Spots')
    VertOffset = VertOffset*VertSpacing;
    HorizOffset = HorizOffset*HorizSpacing;
end

%textVAR15 = Do you want to label the spots only (takes less memory) or will you be using them in downstream modules (e.g. saving an image of them or measuring them)?
%choiceVAR15 = Label only
%choiceVAR15 = Use downstream
LabelOrUseDownstream = char(handles.Settings.VariableValues{CurrentModuleNum,15});
%inputtypeVAR15 = popupmenu

%textVAR16 = If you are using the spots downstream, what do you want to call the image of the outlines of the objects?
%infotypeVAR16 = imagegroup indep
%defaultVAR16 = Do not save
SaveOutlined = char(handles.Settings.VariableValues{CurrentModuleNum,16}); 

%textVAR17 =  If you are using the spots downstream, what do you want to call the label matrix image?
%infotypeVAR17 = imagegroup indep
%defaultVAR17 = Do not save
SaveColored = char(handles.Settings.VariableValues{CurrentModuleNum,17}); 

%textVAR18 = If you are using the spots downstream and saving the label matrix image, do you want to save it in RGB or grayscale?
%choiceVAR18 = RGB
%choiceVAR18 = Grayscale
SaveMode = char(handles.Settings.VariableValues{CurrentModuleNum,18}); 
%inputtypeVAR18 = popupmenu

******************

- There is a general popupmenu bug: for example, in ImageTiler, if I load this module after loading other modules (like SaveImages) and leave the default "TiledImage" as it is, this 'TiledImage' option does not automatically show up in the SaveImages module as an image I can choose. The workaround is simply to click on the TiledImage text in the  ImageTiler module. This refreshes the popup menu in the saveimages module so that the TiledImage can now be selected. Another popupmenu bug: To reproduce, first add for example IdentifyPrimIntensIntens to the pipeline, close the add module window, and then add for example the LoadImagesText module. Move the LoadImagesText module to the top. Now it is still not possible to choose an input image in the IdentifyPrimIntensIntens module. This problem might have the same root case.

- Variable bug: To reproduce, make a pipeline of LoadImagesText, then IdentifyPrimIntensIntens, then MeasureAreaShape. In MeasureAreaShape, choose Cells in the first slot. Then go to Identify module and change the objects to be identified from Cells to Nuclei. When returning to MeasureAreaShape, you will see that what was previously set to Cells has automatically changed to Nuclei. In my view, this is unanticipated behavior and should not happen. It ought to stay set to Cells until you change it (even though Cells will not exist and the pipeline will fail, at least it is the user's fault and they can figure out the problem).  The worse problem (other than it being unanticipated) is that when you actually run the pipeline, the MeasureAreaShape module still goes looking for Cells rather than Nuclei, so it fails. This part of the error can be prevented by going to MeasureAreaShape and re-selected Nuclei, even though that is the option that's already chosen. So, re-selecting it seems to embed the proper choice into the handles.

- variable bug: for IdentifyPrimIntenIntens (and possibly other modules), there is a problem with the variable - what do you want to call the labeled matrix image?  Typing in a custom entry using the 'Other...' option yields an error. See that module for more details on the error produced.  Perhaps we decided that this bug is not worth fixing, in which case remove the comments there and convert any other similar situations in other modules so that this error does not occur.

- In several places there is text information entered as a variable description that does not need a corresponding variable box (see SaveImages for an example). A box with the text 'n/a' appears next to these variable descriptions that is unnecessary.  This seems odd - can we make it so the variable box doesn't appear if it is n/a?  I think maybe the reason it is done this way is to be sure that if you scroll down using the slider this extra text information is displayed properly.

- It used to work that if we added "LongBox" to the end of a variable description, a long edit box would be shown. Also, if the text contained within an edit box outgrew a small edit box (e.g. more than 20 characters I think), then a long edit box would be shown so all the text is visible.  With the changes associated with the new popupmenus, etc., we lost this functionality. Most, or maybe all, of the instances where we used LongBox  was to input a path name. In these cases, it would be very nice to instead have a browse button and a long edit box to help the user choose or type in a path.  This would involve creating a new variableinfotype.  This does not, however, take care of the other usage of long edit boxes: so we also need to adjust the popupmenus and small edit boxes so that if their contents become too long, the popupmenus or small edit boxes drop down to the next line and become long.

- We've lost the regular Matlab toolbar that shows up in figures - the one that has save, print, zoom, add text, etc. Can we add it back?

- For the interactive zoom part of CPfigure, it seems there's no way to turn it off. (the tool itself works fine). It'd be nice to click the 'Interactive Zoom' text on the menu and have it turn off and the little X Y indicator go away. Also, clicking the 'X' to close the XY indicator yields an error.

- Put in the help menus for ImageTools and DataTools.

- There is an incompatibility between the Write Measurements subfunction of the ExportData DataTool and the MeasureTexture module. This error is produced when trying to export data from an output file that contains measurements made by the MeasureTexture module: Error using ==> ExportData> WriteMeasurements. Error in handles.Measurements structure. The field Texture_CorrectedGray does not have an associated text field.

- SaveImages is not actually checking to prevent overwriting existing images, even when you have the variable set to dooublecheck.

- Remove all Programming notes from each module and instead we will just have the one Help file of programming notes.

- cvs remove everything the the DeveloperDropBox except TiledImage.mat, TiledImage.fig, SpotID6SET.mat and the CVS folder (of course!).

- Make ImageTiler produce a button in the final figure that allows retrieval of a high resolution image. (Click the button, then click the part of the image you want to see in more detail). There should also be a button that allows you to select the folder where the images are stored so that the high-res button knows where to go to look for the images, in case they are not in the same place they were when the figure was originally made.  Adjust the help if ImageTiler to reflect this change when it's made.

- Put in some way to save a figure (either a module or ImageTool). (Anne thinks the best approach is to adapt SaveImages module and SaveImageAs image tool to be able to save .fig format).

_ It's a bit complicated but I'd like to combine IdentifyWellSpots (automatic version) and SpotIdentifier (manual version) into a single module (to be called IdentifyPrimGrid?). 

- Should we rename all the Identify modules? The Primary/Secondary nomenclature is quite meaningful but maybe not that user friendly.

- IdentifyWellSpots needs to be polished up - it needs more help text, the boilerplate etc, and it needs to be made just like the other Identify modules in terms of the various things that end up stored in the handles structure.  Also, we need a way to have the module figure out if there is no good way to line up the identified spots; if the settings are weird (e.g. I type in an 8 x 11 grid when the image actually has an 8 x 12 grid), I get errors but they aren't explained very well. (e.g. Non-finite endpoints or increment for colon operator in index).

- SpotIdentifier needs to be polished up - see the help of that file for a few things we wanted to do or check. Some of these items may be done already.

- Combine Load Images and Movies (including Order & Text versions) into a single module.(I think this would be great, but maybe there are compelling reasons not to do it).  At the moment, the code which determines which files in the image directory are shown in the list box in the main CP GUI is weeding out movie file types, I think.  Also, the LoadImagesText module lists only 6 file formats that can be read. This list of file formats that appears in its popupmenu should be retrieved from CPimread.

- Maybe make new pipelines to show off different features of CellProfiler if desired (e.g. the SpotIdentifier or yeast colony finding).

- Make spot identifier crop out the background to just leave the plate. [Actually, Anne thinks we should adapt the Crop module to take in an object  (ie. the plate) identified by one of the identify modules and crop based on that object (anything outside the object becomes black).  The result of this can then be fed to the SpotIdentifier module].

- Put RGBsplit and RGBtoGray a single module (like IdentifyPrim AdaptThreshold - But does that work?). Call the resulting module RGBtoGray and move RGBSplit to Outdated.

- Improve the window that appears at the end of an analysis run: Right now it prints the time elapsed for every cycle, which is almost always way too much info to fit in the window. So four columns: [Module name  |  Time for first cycle  | Time for last cycle | Average time for all other cycles], and then one row for each module in the pipeline.  Change the Timer to also display this information, using the term 'Cycle' rather than 'Image set'.  Also, have it convert to minutes or hours if it's reasonable instead of displaying in seconds all the time.

- Make measure windows expand to fit the number of lines of data that are produced. Maybe try using CPtextdisplaybox.m, which displays text using a slider so it's infinitely expandable.

- (Ola is working on this) We have made a ton of changes and not checked user-imported data in a long time.  Check and see that Add/View/Clear are still working and that they pay attention to having the proper number of entries when adding your own sample info to an existing output file.  i think we may want to remove the 'memory' option or we need to alter code to accommodate it, because at the moment i think it will be cleared from the handles structure at the beginning of a run. ViewData should work on numerical data too, not just imported data.

- For the Data Layout tool, the help is not extensive. Check an old version of the tool and salvage some of its help.

- Whenever anything is saved to the hard drive, add an error
       check to see whether the user has permission to write to that
       location (esp. CellProfiler.m and AlgSaveImages.m). From within the target directory, run:
       [ignore,Attributes] = fileattrib, if Attributes.UserWrite == 0,
       then error(INSERT PROPER ERROR STUFF HERE), end 

- Move the help contents of IdentifySecPropagateSubfunction to the help for 
 IdentifySecPropagate and then remove IdentifySecPropagateSubfunction.m from cvs (i.e. delete it), because it contains no code but appears as a module to load in the pipeline when you click the AddModule button.

- Save Image As tool: does not work well for all kinds of
       displayed images (e.g. The mean image produced by correct illum
       divide all mean comes out weird). Test it with a bunch of image outputs and make it more compatible.

- When figures produced by SpotIdentifier are saved as matlab fig files and opened later, when CellProfiler itself is not open, and then you click on SpotIdentifying Info - Show, an error is produced (at least when no spot identifying info has been loaded):
??? Error using ==> guidata
H must be the handle to a figure or figure descendent.
Error in ==> CPmsgbox at 198
handles = guidata(findobj('Tag','figure1'));
Error in ==> CPwarndlg at 42
handle = CPmsgbox(WarnStringCell,DlgName,'warn',Replace);
??? Error while evaluating uicontrol Callback.

- SaveImages module - have a way that you can type in special formatting. E.g. if you are going to save in gif mode, you should be able to type in the optional parameters like 'BackgroundColor',0 into a text box and have that text appended within the imwrite command.

- Many of the identify modules produce object outlines on top of the original image. I would like to change all of these so that the outlines only (without the underlying grayscale image) are saved in the handles structure (maybe as logical/binary images?) and then you can overlay them on an image using a separate module. This allows more flexibility. (for example, identify well spots doesn't know what the 'original image' is so it can't display outlines on an original image). It also reduces the size of the image stored in the handles structure, since it would be a logical format rather than full 8 bit, but that's a minor advantage. To accomplish this, we should make a module 'AddImages' that can add two images' pixel values in the normal manner but also has an option to make one of the images' nonzero values be either (a) the maximum allowed value for a particular image format (e.g. 255 for 8 bit images) or (b) the maximum of the grayscale image (e.g. if an image has values from 0 to 0.17, the binary outlines would be assigned the value 0.17).

- In a similar manner, many identify modules produce a label matrix image and there is an option to save this image in colored label matrix format. I'd like to take this feature out of each individual identify module (it adds another image to the handles structure which takes up space) and instead have the SaveImages module have an option to convert a label matrix to color. Perhaps we can then also have an option in SaveImages to choose the colormap to be used for this conversion. It's useful to take it out of each individual identify module because it's not very common that someone actually wants to save or use the colored label matrix downstream. It's usually just for display purposes during processing. This also is one less thing to make sure is present in every Identify module.

- Make another primary object identification module based on
       Intensity then distance. 

- RenameOrRenumberFile behaves weirdly when trying to rename and renumber.  For example, for the file IMG_0760.JPG I tried these settings: # characters beginning = 4, # characters at end = 4, any text to add = /, characters for renumbering = 5.  I expected this to yield IMG_00760.JPG, but instead it yields: IMG_00000.JPG  Likewise, # characters for renumbering = 3 should yield IMG_760.JPG but instead it yields IMG_000.JPG.

- It would be nice to allow CellProfiler to be used by different people and each one could have their own user preferences.  Right now preferences can be saved (File > Save preferences), but we should allow the user to choose whether to save these preferences as the default preferences (in CellProfilerPreferences.mat), or alternately, to name the preferences file something unique (e.g. AnneCellProfilerPreferences.mat). Then the user could load their preferences by using: File > Load preferences.

- When Saving a pipeline, after you confirm the filename change (adding SET or PIPE to the name), it asks if you want to save the pipeline as a text file. If you click yes but then cancel at this stage, you don't get the dialog box confirming that the pipeline file itself was saved. I guess the best thing to do is after confirming the filename of the pipeline itself, the confirmation window should appear that it was saved and a separate confirmation window should appear if you save as a text file.  Also, in all of the dialog boxes relating to this function, we should refer to the 'settings' as 'pipeline' instead, to be consistent.

- The error dialogs are not proper CP color. Also, in several places, we use the helpdlg Matlab function and so the color of the resulting help dialog window is not the proper CP color.

- Add a happy dialog box that shows while CellProfiler is loading.  Include the CellProfiler logo, 'CellProfiler is starting up...' text, the authors & contributors, etc.

- In SaveImages, have the file format in which to save images be a popupmenu based on what is compatible with the imwrite command of matlab, plus .mat files. If possible, this list should be automatically obtained (in the same way that typing imread or CPimread lists the file formats), but i don't know if imwrite yields a list like that. Or maybe it's the same list as imread.

- The CreateWebPage module needs help documentation and to be put in the category 'Other', and the license info, etc.  If there is nothing of interest to display in the figure for this module, it ought to close during the first cycle.

- Test each modules on color vs grayscale and make sure they all work or have some type of error catching.

- The RGB buttons on CPfigures produce an error at the command line when the figure is only displaying text. It should either produce a warning dialog stating what the RGB buttons are for and that there is no image in the window, or it should just do nothing.
??? Error using ==> set
Index exceeds matrix dimensions.
??? Error using ==> set
Error while evaluating uicontrol Callback.

- It would be nice if the Crop module would allow you to draw a rectangle (rather than an ellipse) on each image as it cycles through.

- Try to compile the Matlab code so CellProfiler can be run on computers that don't have Matlab.

- Make the download new modules work.

[Do the following prior to releasing:
- Smart Indent
- M Lint error checking
- Check for TODO's
- Test every module & button
- Especially, try canceling and closing & opening figure windows
- Prepare updated manual
- Make reference sheet with short descriptions of the modules.
- Make "applications" technical notes and automatic settings
       files to give a good starting place for common applications
       (e.g. cell count, yeast colony count, staining intensity, cell
       cycle, nuclear/cytoplasmic translocation) and for common cell
       types. 
- Design an informational brochure
- Make a tutorial to demonstrate how CP is used.]

---------------------------------------------------

POST-PUBLIC RELEASE SUPPORT:

     - Monitor imaging newsgroups and inform people about the software
     - Provide technical support/help desk
     - Fix bugs
     - Maintain for new releases of OS's and Matlab
     - Check Matlab Central for useful code to incorporate into
       CellProfiler or its modules (last checked on 9-16-04:
       Biotech/medical, Graphics (all 3 categories), Image Processing,
       Utilities - GUI Tools & examples, and Misc.) 
     - Organize training workshops
     - Present at conferences

---------------------------------------------------
LONG-TERM:

GUI 1 (Joo Han might work on this) +++ Histogram DataTool is kind of hacked together at the moment. Streamline it and update its help; possible other improvements: allow fewer labels, plus fewer decimals (right now, it's either-or). If you choose option P (percentage) rather than N (number), the y axis is still labeled 'Number of objects' rather than 'percentage of objects'.

GUI 3 +++ Make sure the ManualCompiler still works (in DeveloperScripts). Make the help/manual prettier: For each example image that is just text, type the text into the help for that file instead of referring to the image, because as it is these images are stretched a lot.

- Make it possible to use data from previous modules as the arguments of later modules.  Also make it possible for entire modules to be entered as arguments (with all their individual variables).  For instance, it would be nice if spot identifier took in an identify module that could identify each spot specifically and then create a grid to match it.

---------------------------------------------------

PROBABLY DO NOT WANT TO INVEST TIME IN THESE:

VISION 2 +++ Improve foreground/background determination for the IdentifySecPropagate module.  Ask Ray for advice. Here is one idea:
Make the background correction based on Each image (rather than All images) a little more sophisticated as follows: Cell segmentation and llumination correction can be made simultaneously for best result.
The usual procedure is as follows (the technique is called Expectation Maximization segmentation):
Segment cells
Estimate illumination variation from the background and correct the original image
Re-segment cells
Re-estimate illumination variation from the background and correct the original image
Re-segment cells
Repeat until convergence.
The iterations can be performed on a low-resolution version of the original image, e.g. 200x200 pixels, so I don't think it's time-consuming.  This will involve figuring out how to call a downstream Identify module to use the settings and code from the downstream module (otherwise we'd have to build background subtraction into every identify module). 

++ Implement the algorithm for in vitro angiogenesis from  IEEE Trans Med Imaging. 2005 Apr;24(4):549-53. Robust quantification of in vitro angiogenesis through image analysis. Niemisto A, Dunmire V, Yli-Harja O, Zhang W, Shmulevich I

++ Implement the algorithm for migration analysis from Qin J, Chittenden TW, Gao L, Pearlman JD.	 Automated migration analysis based on cell texture: method & reliability. BMC Cell Biol. 2005 Mar 3;6(1):9. 

+++ Try to get code for yeast segmentation from this paper, and
       incorporate it into CellProfiler: SCMD: Saccharomyces
       cerevisiae Morphological Database. Nucleic Acids Res. 2004 Jan
       1;32 Database issue:D319-22. PMID: 14681423  
Perhaps more promising is the paper Coelho, M, Ferreira et al, Applied Microbial and Cell Physiol, 2004, where they mention having Matlab code to accomplish yeast cell segmentation (Anne has this paper).

+++ Make a user-scoring module that allows the user to view and
       annotate each image manually. Show control side by side (1-4 at
       a time) and add that assessment to the data structure. Maybe
       allow randomizing (to do blind tests). Allow clicking
       through. Could also be used just for viewing images (e.g. every
       third image in a gigantic image set).  Whether the file name
       and/or sample info is shown should be optional. 

+++ Allow data to be exported to Open Microscopy Environment
       databases.  (Being worked on by Tony Scelfo in Peter Sorger's lab).

+++ Port to python so we don't need to use Matlab anymore.

+++ Binucleate cells: figure out how to identify and count them

+++ Make modules to identify objects in transmitted light/DIC images.

+++ Align/resize stack of images (like yeast plates). See Matlab
       demo on image registration. Did Chris already do this? 

+++ Neurite outgrowth module

+++ Particle tracking over time module

- Add background masking to the identify sec distance module
       (make it optional in case a cell stain image is not
       available). 

[ASK RAY IF THIS IS WORTH IT (HE SAYS PROBABLY NOT)]>>>>
- Adjust ModuleNames or VariableValues so that their dimensions match (if possible). E.g. the following example has 6 modules loaded, so it would make more sense if VariableValues was a 13 x 6 cell rather than 6 x 13, so that all four Settings have 6 columns.
Settings =      ModuleNames: {1x6 cell}
             VariableValues: {6x13 cell}
         NumbersOfVariables: [13 6 5 6 4 8]
    VariableRevisionNumbers: [2 0 1 0 1 1]
*Note: This requires editing almost all the modules, while this improvement is not absolutely necessary; the time cost should be considered.

[ASK RAY IF THIS IS WORTH IT (HE SAYS PROBABLY NOT)]>>>>
+++ Restructure CellProfiler.m so that the GUI creates a configuration file which is then sent to a simple pipeline program. That would make farming out jobs to multiple machines easier, running a job that broke somewhere, and it would make it easier to create new GUIs aimed at different tasks, if people wanted to. The current GUI wouldn't actually need to change, it could still call the pipeline-running-function and parse errors from it (which is a definite good thing to keep around).   It would be entirely under the hood.

---------------------------------------------------

DONE from 2005_08_10 Onwards:
