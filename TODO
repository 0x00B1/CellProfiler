CellProfiler cell image analysis software development 
JULY 28, 2005  IN ORDER OF PRIORITY

- SpotIdentifier needs to load spot identifying information properly because xlsread just doesn't work reliably. We should use the code from AddData to read data from a text file (just a simple text list of information) and then reshape it to fit the proper grid.

- Pixels is misspelled 'pixals' in SpotID - I fixed it there, but check other code to see if it's misspelled elsewhere too.

- There is a general popupmenu bug: for example, in ImageTiler, if I load this module after loading other modules (like SaveImages) and leave the default "TiledImage" as it is, this 'TiledImage' option does not automatically show up in the SaveImages module as an image I can choose. The workaround is simply to click on the TiledImage text in the  ImageTiler module. This refreshes the popup menu in the saveimages module so that the TiledImage can now be selected. Another popupmenu bug: To reproduce, first add for example IdentifyPrimIntensIntens to the pipeline, close the add module window, and then add for example the LoadImagesText module. Move the LoadImagesText module to the top. Now it is still not possible to choose an input image in the IdentifyPrimIntensIntens module. This problem might have the same root case.

- Loading pipelines bug: When loading a pipeline, the old settings do not seem completely cleared away. For example the old pipeline had module #2 with 15 variables and the new pipeline's module 2 has only 5. In handles.Settings.VariableValues, variables 6-15 for old module 2 are still present.  These variables are showing up in the main GUI when you click on the module, but this only happens sometimes - I can't pin it down.  Also, I loaded a pipeline into a 'fresh' CellProfiler, and canceled at the second module when it asked me whether to load saved or default variables (due to an old variable revision number). Then I looked at the handles.Settings and this is what was there (instead of it being empty):
                  PixelSize: '1'
                ModuleNames: {1x13 cell}
             SelectedOption: [0 0 0 0 0 0 0 0 0 0 0 0 0 0]
         NumbersOfVariables: [12 5 5]
             VariableValues: {2x12 cell}
    VariableRevisionNumbers: [3 2]

- Variable bug: To reproduce, make a pipeline of LoadImagesText, then IdentifyPrimIntensIntens, then MeasureAreaShape. In MeasureAreaShape, choose Cells in the first slot. Then go to Identify module and change the objects to be identified from Cells to Nuclei. When returning to MeasureAreaShape, you will see that what was previously set to Cells has automatically changed to Nuclei. In my view, this is unanticipated behavior and should not happen. It ought to stay set to Cells until you change it (even though Cells will not exist and the pipeline will fail, at least it is the user's fault and they can figure out the problem).  The worse problem (other than it being unanticipated) is that when you actually run the pipeline, the MeasureAreaShape module still goes looking for Cells rather than Nuclei, so it fails. This part of the error can be prevented by going to MeasureAreaShape and re-selected Nuclei, even though that is the option that's already chosen. So, re-selecting it seems to embed the proper choice into the handles.

- variable bug: for IdentifyPrimIntenIntens (and possibly other modules), there is a problem with the variable - what do you want to call the labeled matrix image?  Typing in a custom entry using the 'Other...' option yields an error. See that module for more details on the error produced.  Perhaps we decided that this bug is not worth fixing, in which case remove the comments there and convert any other similar situations in other modules so that this error does not occur.

- In several places there is text information entered as a variable description that does not need a corresponding variable box (see SaveImages for an example). A box with the text 'n/a' appears next to these variable descriptions that is unnecessary.  This seems odd - can we make it so the variable box doesn't appear if it is n/a?  I think maybe the reason it is done this way is to be sure that if you scroll down using the slider this extra text information is displayed properly.

- It used to work that if we added "LongBox" to the end of a variable description, a long edit box would be shown. Also, if the text contained within an edit box outgrew a small edit box (e.g. more than 20 characters I think), then a long edit box would be shown so all the text is visible.  With the changes associated with the new popupmenus, etc., we lost this functionality. Most, or maybe all, of the instances where we used LongBox  was to input a path name. In these cases, it would be very nice to instead have a browse button and a long edit box to help the user choose or type in a path.  This would involve creating a new variableinfotype.  This does not, however, take care of the other usage of long edit boxes: so we also need to adjust the popupmenus and small edit boxes so that if their contents become too long, the popupmenus or small edit boxes drop down to the next line and become long.

- We've lost the regular Matlab toolbar that shows up in figures - the one that has save, print, zoom, add text, etc. Can we add it back?

- For the interactive zoom part of CPfigure, it seems there's no way to turn it off. (the tool itself works fine). It'd be nice to click the 'Interactive Zoom' text on the menu and have it turn off and the little X Y indicator go away. Also, clicking the 'X' to close the XY indicator yields an error.

- Put in the help menus for ImageTools and DataTools.

- There is an incompatibility between the Write Measurements subfunction of the ExportData DataTool and the MeasureTexture module. This error is produced when trying to export data from an output file that contains measurements made by the MeasureTexture module: Error using ==> ExportData> WriteMeasurements. Error in handles.Measurements structure. The field Texture_CorrectedGray does not have an associated text field.

- SaveImages is not actually checking to prevent overwriting existing images, even when you have the variable set to dooublecheck.

- Remove all Programming notes from each module and instead we will just have the one Help file of programming notes.

- cvs remove everything the the DeveloperDropBox except TiledImage.mat, TiledImage.fig, SpotID6SET.mat and the CVS folder (of course!).

- Make ImageTiler produce a button in the final figure that allows retrieval of a high resolution image. (Click the button, then click the part of the image you want to see in more detail). There should also be a button that allows you to select the folder where the images are stored so that the high-res button knows where to go to look for the images, in case they are not in the same place they were when the figure was originally made.  Adjust the help if ImageTiler to reflect this change when it's made.

- Put in some way to save a figure (either a module or ImageTool). (Anne thinks the best approach is to adapt SaveImages module and SaveImageAs image tool to be able to save .fig format).

- IdentifyWellSpots needs to be polished up - it needs more help text, the boilerplate etc, and it needs to be made just like the other Identify modules in terms of the various things that end up stored in the handles structure.  Also, we need a way to have the module figure out if there is no good way to line up the identified spots; if the settings are weird (e.g. I type in an 8 x 11 grid when the image actually has an 8 x 12 grid), I get errors but they aren't explained very well. (e.g. Non-finite endpoints or increment for colon operator in index).

- SpotIdentifier needs to be polished up - see the help of that file for a few things we wanted to do or check. Some of these items may be done already.

- Combine Load Images and Movies (including Order & Text versions) into a single module.(I think this would be great, but maybe there are compelling reasons not to do it).  At the moment, the code which determines which files in the image directory are shown in the list box in the main CP GUI is weeding out movie file types, I think.  Also, the LoadImagesText module lists only 6 file formats that can be read. This list of file formats that appears in its popupmenu should be retrieved from CPimread.

- Maybe make new pipelines to show off different features of CellProfiler if desired (e.g. the SpotIdentifier or yeast colony finding).

- Make spot identifier crop out the background to just leave the plate. [Actually, Anne thinks we should adapt the Crop module to take in an object  (ie. the plate) identified by one of the identify modules and crop based on that object (anything outside the object becomes black).  The result of this can then be fed to the SpotIdentifier module].

- Put RGBsplit and RGBtoGray a single module (like IdentifyPrim AdaptThreshold - But does that work?). Call the resulting module RGBtoGray and move RGBSplit to Outdated.

- Improve the window that appears at the end of an analysis run: Right now it prints the time elapsed for every cycle, which is almost always way too much info to fit in the window. So four columns: [Module name  |  Time for first cycle  | Time for last cycle | Average time for all other cycles], and then one row for each module in the pipeline.  Change the Timer to also display this information, using the term 'Cycle' rather than 'Image set'.  Also, have it convert to minutes or hours if it's reasonable instead of displaying in seconds all the time.

- Make measure windows expand to fit the number of lines of data that are produced. Maybe try using CPtextdisplaybox.m, which displays text using a slider so it's infinitely expandable.

- (Ola is working on this) We have made a ton of changes and not checked user-imported data in a long time.  Check and see that Add/View/Clear are still working and that they pay attention to having the proper number of entries when adding your own sample info to an existing output file.  i think we may want to remove the 'memory' option or we need to alter code to accommodate it, because at the moment i think it will be cleared from the handles structure at the beginning of a run. ViewData should work on numerical data too, not just imported data.

- For the Data Layout tool, the help is not extensive. Check an old version of the tool and salvage some of its help.

- Whenever anything is saved to the hard drive, add an error
       check to see whether the user has permission to write to that
       location (esp. CellProfiler.m and AlgSaveImages.m). From within the target directory, run:
       [ignore,Attributes] = fileattrib, if Attributes.UserWrite == 0,
       then error(INSERT PROPER ERROR STUFF HERE), end 

- Move the help contents of IdentifySecPropagateSubfunction to the help for 
 IdentifySecPropagate and then remove IdentifySecPropagateSubfunction.m from cvs (i.e. delete it), because it contains no code but appears as a module to load in the pipeline when you click the AddModule button.

- Save Image As tool: does not work well for all kinds of
       displayed images (e.g. The mean image produced by correct illum
       divide all mean comes out weird). Test it with a bunch of image outputs and make it more compatible.

- SaveImages module - have a way that you can type in special formatting. E.g. if you are going to save in gif mode, you should be able to type in the optional parameters like 'BackgroundColor',0 into a text box and have that text appended within the imwrite command.

- Many of the identify modules produce object outlines on top of the original image. I would like to change all of these so that the outlines only (without the underlying grayscale image) are saved in the handles structure (maybe as logical/binary images?) and then you can overlay them on an image using a separate module. This allows more flexibility. (for example, identify well spots doesn't know what the 'original image' is so it can't produce outlines on an original image).  To accomplish this, we should make a module 'AddImages' that can add two images' pixel values in the normal manner but also has an option to make one of the images' nonzero values be either (a) the maximum allowed value for a particular image format (e.g. 255 for 8 bit images) or (b) the maximum of the grayscale image (e.g. if an image has values from 0 to 0.17, the binary outlines would be assigned the value 0.17).

- Make another primary object identification module based on
       Intensity then distance. 

- RenameOrRenumberFile behaves weirdly when trying to rename and renumber.  For example, for the file IMG_0760.JPG I tried these settings: # characters beginning = 4, # characters at end = 4, any text to add = /, characters for renumbering = 5.  I expected this to yield IMG_00760.JPG, but instead it yields: IMG_00000.JPG  Likewise, # characters for renumbering = 3 should yield IMG_760.JPG but instead it yields IMG_000.JPG.

- When Saving a pipeline, after you confirm the filename change (adding SET or PIPE to the name), it asks if you want to save the pipeline as a text file. If you click yes but then cancel at this stage, you don't get the dialog box confirming that the pipeline file itself was saved. I guess the best thing to do is after confirming the filename of the pipeline itself, the confirmation window should appear that it was saved and a separate confirmation window should appear if you save as a text file.  Also, in all of the dialog boxes relating to this function, we should refer to the 'settings' as 'pipeline' instead, to be consistent.

- When saving pipelines, it offers to add 'SET' to the name. We should change this to 'PIPELINE'. Is there a shorter bit of text we could add that would still make sense rather than PIPELINE?  Also, it should check whether the filename the user typed in already has 'SET' at the end - if so, skip the dialog box asking whether to add it.

- The error dialogs are not proper CP color. Also, in several places, we use the helpdlg Matlab function and so the color of the resulting help dialog window is not the proper CP color.

- Add a happy dialog box that shows while CellProfiler is loading.  Include the CellProfiler logo, 'CellProfiler is starting up...' text, the authors & contributors, etc.

- In SaveImages, have the file format in which to save images be a popupmenu based on what is compatible with the imwrite command of matlab, plus .mat files. If possible, this list should be automatically obtained (in the same way that typing imread or CPimread lists the file formats), but i don't know if imwrite yields a list like that. Or maybe it's the same list as imread.

- The CreateWebPage module needs help documentation and to be put in the category 'Other', and the license info, etc.  If there is nothing of interest to display in the figure for this module, it ought to close during the first cycle.

- Test each modules on color vs grayscale and make sure they all work or have some type of error catching.

- The RGB buttons on CPfigures produce an error at the command line when the figure is only displaying text. It should either produce a warning dialog stating what the RGB buttons are for and that there is no image in the window, or it should just do nothing.
??? Error using ==> set
Index exceeds matrix dimensions.
??? Error using ==> set
Error while evaluating uicontrol Callback.

- It would be nice if the Crop module would allow you to draw a rectangle (rather than an ellipse) on each image as it cycles through.

- Try to compile the Matlab code so CellProfiler can be run on computers that don't have Matlab.

[Do the following prior to releasing:
- Smart Indent
- M Lint error checking
- Check for TODO's
- Test every module & button
- Especially, try canceling and closing & opening figure windows
- Prepare updated manual
- Make reference sheet with short descriptions of the modules.
- Make "applications" technical notes and automatic settings
       files to give a good starting place for common applications
       (e.g. cell count, yeast colony count, staining intensity, cell
       cycle, nuclear/cytoplasmic translocation) and for common cell
       types. 
- Design an informational brochure
- Make a tutorial to demonstrate how CP is used.]

---------------------------------------------------

POST-PUBLIC RELEASE SUPPORT:

     - Monitor imaging newsgroups and inform people about the software
     - Provide technical support/help desk
     - Fix bugs
     - Maintain for new releases of OS's and Matlab
     - Check Matlab Central for useful code to incorporate into
       CellProfiler or its modules (last checked on 9-16-04:
       Biotech/medical, Graphics (all 3 categories), Image Processing,
       Utilities - GUI Tools & examples, and Misc.) 
     - Organize training workshops
     - Present at conferences

---------------------------------------------------
LONG-TERM:

GUI 1 (Joo Han might work on this) +++ Histogram DataTool is kind of hacked together at the moment. Streamline it and update its help; possible other improvements: allow fewer labels, plus fewer decimals (right now, it's either-or). If you choose option P (percentage) rather than N (number), the y axis is still labeled 'Number of objects' rather than 'percentage of objects'.

GUI 3 +++ Make sure the ManualCompiler still works (in DeveloperScripts). Make the help/manual prettier: For each example image that is just text, type the text into the help for that file instead of referring to the image, because as it is these images are stretched a lot.

- Make it possible to use data from previous modules as the arguments of later modules.  Also make it possible for entire modules to be entered as arguments (with all their individual variables).  For instance, it would be nice if spot identifier took in an identify module that could identify each spot specifically and then create a grid to match it.

---------------------------------------------------

PROBABLY DO NOT WANT TO INVEST TIME IN THESE:

VISION 2 +++ Improve foreground/background determination for the IdentifySecPropagate module.  Ask Ray for advice. Here is one idea:
Make the background correction based on Each image (rather than All images) a little more sophisticated as follows: Cell segmentation and llumination correction can be made simultaneously for best result.
The usual procedure is as follows (the technique is called Expectation Maximization segmentation):
Segment cells
Estimate illumination variation from the background and correct the original image
Re-segment cells
Re-estimate illumination variation from the background and correct the original image
Re-segment cells
Repeat until convergence.
The iterations can be performed on a low-resolution version of the original image, e.g. 200x200 pixels, so I don't think it's time-consuming.  This will involve figuring out how to call a downstream Identify module to use the settings and code from the downstream module (otherwise we'd have to build background subtraction into every identify module). 

++ Implement the algorithm for in vitro angiogenesis from  IEEE Trans Med Imaging. 2005 Apr;24(4):549-53. Robust quantification of in vitro angiogenesis through image analysis. Niemisto A, Dunmire V, Yli-Harja O, Zhang W, Shmulevich I

++ Implement the algorithm for migration analysis from Qin J, Chittenden TW, Gao L, Pearlman JD.	 Automated migration analysis based on cell texture: method & reliability. BMC Cell Biol. 2005 Mar 3;6(1):9. 

+++ Try to get code for yeast segmentation from this paper, and
       incorporate it into CellProfiler: SCMD: Saccharomyces
       cerevisiae Morphological Database. Nucleic Acids Res. 2004 Jan
       1;32 Database issue:D319-22. PMID: 14681423  
Perhaps more promising is the paper Coelho, M, Ferreira et al, Applied Microbial and Cell Physiol, 2004, where they mention having Matlab code to accomplish yeast cell segmentation (Anne has this paper).

+++ Make a user-scoring module that allows the user to view and
       annotate each image manually. Show control side by side (1-4 at
       a time) and add that assessment to the data structure. Maybe
       allow randomizing (to do blind tests). Allow clicking
       through. Could also be used just for viewing images (e.g. every
       third image in a gigantic image set).  Whether the file name
       and/or sample info is shown should be optional. 

+++ Allow data to be exported to Open Microscopy Environment
       databases.  (Being worked on by Tony Scelfo in Peter Sorger's lab).

+++ Port to python so we don't need to use Matlab anymore.

+++ Binucleate cells: figure out how to identify and count them

+++ Make modules to identify objects in transmitted light/DIC images.

+++ Align/resize stack of images (like yeast plates). See Matlab
       demo on image registration. Did Chris already do this? 

+++ Neurite outgrowth module

+++ Particle tracking over time module

- Add background masking to the identify sec distance module
       (make it optional in case a cell stain image is not
       available). 

[ASK RAY IF THIS IS WORTH IT (HE SAYS PROBABLY NOT)]>>>>
- Adjust ModuleNames or VariableValues so that their dimensions match (if possible). E.g. the following example has 6 modules loaded, so it would make more sense if VariableValues was a 13 x 6 cell rather than 6 x 13, so that all four Settings have 6 columns.
Settings =      ModuleNames: {1x6 cell}
             VariableValues: {6x13 cell}
         NumbersOfVariables: [13 6 5 6 4 8]
    VariableRevisionNumbers: [2 0 1 0 1 1]
*Note: This requires editing almost all the modules, while this improvement is not absolutely necessary; the time cost should be considered.

[ASK RAY IF THIS IS WORTH IT (HE SAYS PROBABLY NOT)]>>>>
+++ Restructure CellProfiler.m so that the GUI creates a configuration file which is then sent to a simple pipeline program. That would make farming out jobs to multiple machines easier, running a job that broke somewhere, and it would make it easier to create new GUIs aimed at different tasks, if people wanted to. The current GUI wouldn't actually need to change, it could still call the pipeline-running-function and parse errors from it (which is a definite good thing to keep around).   It would be entirely under the hood.

---------------------------------------------------

DONE DURING IAP>>>>>>>

     -Done- Make the help button next to the image/data tools work.  It should pop open a listbox asking you to choose which tool's help you would like to see, and then it should extract the help from the tool's m-file.  The listbox should also give general help, i.e. "You can add your own tools by writing Matlab m-files, placing them in the ImageTools or DataTools folder, and restarting CellProfiler."

     -Done- When adding a module to the pipeline, check to see whether more than one function with that name exists on the Matlab search path. If so, warn the user, tell the user which pathname to the function will most likely be used, but warn them that this may change if the path is changed by adding modules from another directory.  Suggest that if the module has the same name as a Matlab function, they should consider renaming the module to prevent confusion.

     -Done- When adding a module to the pipeline, CellProfiler checks in a fairly rudimentary way whether it is a valid CellProfiler module and warns the user. However, the module is then half-loaded so nothing works properly and you have to restart CellProfiler. This checking should be more sophisticated, and should recover by not loading the module at all.

     -Done- In CellProfiler.m, check whether the guidata lines are necessary (marked with a TODO).  (They were unnecessary)

     DONE!! - Allow the Save Images module to deal with different bit depths, in case the user wants to save images in 16-bit (e.g. with PNG or JPG). Also allow the user to save an image as a binary (black/white rather than grayscale, so that any nonzero pixels = 1, most useful for viewing a label matrix).

     -Almost done- : Have the time for first set separate from the time for
       subsequent sets. 

     -Done- Make progress bar windows go away when using the close all figures and timers button (e.g. Correct illum modules).

     - done Have LoadSettings button determine whether a file is a valid Settings file.

    - Done "Make projection" module (= average, get code from DivideAllMean). 

     -Done-   adjusted the Show data on image button or the Show image button
       to load DIB images. Also need to adjust any other modules
       that use imread, including those which open all the images to
       calculate something, like CorrectIllum All modules and probably
       IdentifyPrimThreshold and ApplyThreshold (when the threshold is 
       automatically calculated).  Also, DIB's are currently being read
       upside down - need to flip them (flipud).

Done     - Throughout CellProfiler and its modules, remove unnecessary updating of the handles structure (guidata function).

DONE AFTER IAP >>>>
-------------------
Done, I think - The error checking for "there are no images in this folder"
       should be moved out of CellProfiler.m and into the two Load
       Images modules, since some pipelines may not require images in
       order to run properly.
Done - - The confirmation window upon "cancel after image set" button clicking ought to say "confirm cancel", not "confirm close". 

Done (Anne) - Fix CreateBatchScripts, for the option of selecting the default module directory by entering "."  Things were changed recently to add CellProfiler and CellProfiler/Modules to the path, and I am not sure whether this option will still function.

Done (Anne) - In CellProfiler.m, look for lines marked: %%% TODO: Fix filename construction (I think also see lines pertaining to OutputFileOverwrite), and use a less platform-dependent way to construct the path/filenames (e.g. with Matlab's fullfile function), rather than using slashes.

Done (James and Anne) - Remove all 'cd' commands from modules and use full pathnames instead.  In particular, modules that need to look at all the images in a set (Load images, identifythreshold, correctillum, subtract background) typically change to the directory then read the images, whereas we could construct the image filename using fullfile(pathname,filename). (The reason for doing this is to prevent CellProfiler from unexpectedly changing the current directory in matlab.  However, if this method takes more processing time, perhaps we should not make this change).

Done (Anne, with Kyle writing the Help) - Load movies module, with ability to load each frame of a .avi file.  (Look at AvitoImageSlices.m)

- DONE, Delimiter was not functioning on anne's computer, but it seems to work now.- Allow the user to 'export' the current settings into some nice, person-readable text file so they have a permanent record. 

DONE (Anne - SpeedUpCellProfiler module): - Change saving of the output file to be faster for large jobs -> tell the user they can change CP.m code to save only if handles.Current.SetBeingAnalyzed is a multiple of 5 or 10 or whatever, rather than saving after every image set.

Steve Lowe fixed the following:
2/25/05
- Help function does not work for ImageTools and DataTools; The menu often doesn't return to the default first position ('DataTools' or 'ImageTools') after running a tool.
First problem was a partially deleted string defining okcallback. Second problem may have been fixed by someone else, seems to work ok.

3/08/05
Fixed title bar label for Data Tools Help (previously said Image Tools Help).

Changed Image and Data Tools Help windows so that double clicking in list box will display help for the tool, same as clicking OK button.

In PlotOrExportHistograms, fixed problem that filenames containing underscores were not displayed properly as histogram titles (displayed succeeding character as subscript).

3/15/05

- Improve the Data tool "PlotOrExportHistograms":
*Make the dialog box that asks for input from the user (~13 questions) wider.
*When filenames have underscores and these filenames are used to label each histogram in the display, the underscores cause the following text to be subscripted. We fixed this somewhere else in the code at one point by doing a string replacement of underscores with some symbol that prevents the underscore from being read as a string modifier. 
*Flip rows vs columns for exporting the raw histogram data, so that columns are histogram bins and rows are images. Now have option to display in either orientation.
* Update help for this tool.

4/12/05 and 4/15/05
- Created new module IdentifyPrimLaplacianOfGaussian. Functions, but need to verify that it is doing as well as Perlman and Mitcheson's work.
- Added ability to restart a partially completed run, using module Restart.m. TODO: small mods to 45 modules that check SetBeingAnalyzed == 1 and take some global action, some of these may need to be changed to SetBeingAnalyzed == StartingImageSet.
-Made "Close Windows" button work better by tagging figures that CellProfiler creates. Now every figure CP creates has UserData.Application = 'CellProfiler'. "Close Windows" button will delete figures from current and previous invocations of CP.
-ToolsHelpSubfunction: Now closes any existing ToolsHelpWindow because 'ok',
'cancel' callbacks could get confused and throw error if more than one.
-ToolsHelpSubfunction: Set toolsChoice=0 before uiwait to make behavior
correct if exit message box using clicking x instead of cancel.

4/22/05
Went through Modules and adjusted so they will work with Restart.m.

5/24/05 (Colin)
- Allow canceling from the first dialog box when using the Save Image As button.

5/24/05 (Colin)
- The help button does not work for OpenNewImageFile, ShowDataOnImage, AddData, and ClearData

5/24/05 (Joo Han) - Not committed yet, have pending questions.
- I just adapted ClassifyObjects into ClassifyObjectsIntensity, but probably we should combine the two. I wasn't sure how to look up which column of measurements is desired, so that's one definite improvement that ought to be made.  Also, the new version doesn't allow for marking/coloring which object is in which bin since it extracts the data from the handles structure rather than calculating it from a label matrix. Neither version allows anything other than three bins, so it would be nice to allow the user to enter a variable number of bins separated by commas.

5/24/05 (Joo Han)
- Updated help for OpenNewImageFile.m

5/26/05 (Colin)
- After renaming is complete, the list of image names does not update itself automatically

5/26/05 (Colin)
- CPtextdisplaybox scrolls faster


- Done (Joo Han) Figure out a way to let the user to launch CellProfiler without separately launching Matlab (Have Matlab be automatically launched).
                -for Windows: In the installation package, include the shortcut with the path set as: matlab.exe /r CellProfiler
                -for UNIX: In the installation package, include the shortcut with the path set as matlab.exe -r CellProfiler

*The changes below have been canceled and replaced by a new version. The help file for the new syntax will follow soon.

- Done (Joo Han) - Expanded the syntax for declaration of variable boxes and such using comments in modules.

- Done (Joo Han) Combined all the identifyprim modules (need to delete most comments?)

- Done (Joo Han) Wrote the help file for the expanded syntax. (Perhaps too long?)

- Done (Joo Han)	Combined all the load images modules into LoadImages.m, using the expanded syntax.
				Combined all the load movies modules into LoadMovies.m, using the expanded syntax.
				(It would be very simple to change the program so that either LoadImages or LoadMovies module is added to the pipeline by default when the program starts; however, this will result in some loss of flexibility. Perhaps we can have a feature in the GUI called "Frequently Used Modules" where the user can add certain modules with just one click?)
                *Shouldn't we also have a LoadSingleMovie feature? It will probably end up being the most used load movie method..

- Done (Joo Han) Replace OrigImageToBeAnalyzed or OriginalImage or whatever, with 'OrigImage' in all modules in order to make everything consistent.

- Done (Joo Han) Check through all modules and make sure none of them have any variable options that let you load or save images to/from the hard drive - this was archaic and is replaced by LoadImages and SaveImages modules. (Used ReplaceTextInModules and checked modules with more than 3 instances of 'hard drive' found.)

- Done (Joo Han) We have modified several built in matlab functions and produced new functions with the CP prefix (they are all in the main CellProfiler folder). It's unclear which lines we have modified, so use the Matlab tool 'FileComparison Report' to show how the modified functions differ from the original and mark those lines in the code with comments so that we are aware of the differences. *All are well documented. File Comparison Report fails to give meaningful comparison results sometimes due to inconsistency of order, so I went through the modules myself. Most of the CP modules had been modified to indicate that figures or msgboxes created belong to CellProfiler.

- Done (Joo Han) Add error checking to data-related buttons to determine whether
       the .mat file the user selected is a valid CellProfiler output
       file. AddData, ClearData, ConvertBatchFiles.m. Load pipeline already has error check built-in, and for other modules it seems more complicated.

- Done (Joo Han) A modification on the improved version of the comment syntax, to make the combined modules more readable. Refer to IdentifyPrimAdaptThreshold.m for the format.

- Done (Joo Han) Bug fixed for OpenNewImageFile.m where capital lettered image file extensions were not recognized.
 
- Done (Joo Han) When some of the data tools (e.g. Histogram) generate a figure, these figures do not contain information in their UserData to indicate that they are CellProfiler figures, so that the Close windows button in CellProfiler.m does not function on these windows. We should check through all the data tools and image tools and modules and be sure that all figures which are created have the proper userdata.  Perhaps actually we should rewrite the figure function to be CPfigure, which is basically a subfunction calling the figure function plus some lines that add the userdata.

- Done (Colin) Make the DIB cancel button work in CPimread.m > right now it gives a less straightforward error message when you choose cancel during an analysis run. I don't know how it responds during an ImageTool like OpenNewImageFile.m

- Done (Joo Han), in a different way. Despite numerous attempts, we have had trouble adding a panel/frame to the GUI (CellProfiler.fig file) so that variable descriptions don't peek through under the boxes at the bottom of the GUI, when loading a module with lots of variables. The problem is peculiar, because it seems that if we make the change and save the .fig file on a PC it works fine everywhere but on the mac platform suddenly there is a 5 minute delay - the first few times we tried it, the delay occurred upon loading up CellProfiler. Later, it would happen only when you actually try to run a pipeline.  Usually the problem would be fixed by making the changes on a mac rather than a pc, but the past few times we tried, even that doesn't help. It's worth trying again on a mac.  the reason it seems so peculiar may have to do with how the .fig and CellProfiler.m files interact - they seem to update each other in a magical way that gets disturbed if you aren't careful. Seems like a buggy Matlab issue.  If all else fails, we could add a frame 'manually' by writing code in CellProfiler.m that runs upon start up rather than trying to add the panel to the .fig file using GUIDE.

- Done (Steve Lowe) - Restart module. 'Start job midway' module, run image set #XXXX (allow putting in a bunch of comma-delimited numbers to allow random), every 50th.

+++ Done (Steve Lowe) Download code relating to Perlman, Mitchison, et al. Science
       2004 and make modules accordingly (Laplacian of Gaussian to
       identify nuclei)

- Done (Ola) Make the ColorClassifyObjects way cooler: (1) able to use any measurement calculated by other modules - retrieve any measurement from the handles structure (2) allow the user to enter any number of bins. (3) Allow user to choose the colors to display for each bin.  Right now, the module can only do three bins, with fixed colors, and it classifies based on Area only, which is calculated within the module rather than retrieved from the handles.Measurements.

- Done (Ola) - PlotMeasurement DataTool: allow displaying two parameters vs. each
       other in a scatter plot.

- Done (Colin) - Make a button/tool that creates a zipped archive of all the CellProfiler files (e.g. a 'snapshot' of the code that is currently being used). 

- Done (Joo Han) - Implement Log Thresholding by changing CPgraythresh. In Han tested different thresholding methods, and log thresholding seems to be most stable at the moment. Might need to add an option to log threshold or not.

- Done (Joo Han) - Enable the use of popup menus by adding new possible syntax in comments within modules, and - We would like to overhaul all modules that pass images from one to the next to use drop-down menus rather than the user typing in the image name, which will limit typos. This would be a major infrastructure change.

- Done (Joo Han) - Go through all the modules to use popup menus whenever applicable (except IdentifyPrimAdaptThreshold)

- Done (Joo Han) - Allow up/down for combined modules (e.g. IdentifyPrimAdaptThreshold)

- Done (Joo Han) - Fix the scrolling method so that a variable description always becomes visible only after the corresponding variable box becomes visible, instead of just looking at the location.

- Done (Joo Han) - Make a "CreateWebPage" module that takes in original images, small thumbnail versions of the images (e.g. made with the ResizeImages module), and a filename that you want to call the html file.  The module should then write a text html file with code something like this:
<A HREF= origfilename.jpg><IMG SRC = thumbnailfilename.jpg>
</A> <BR>
Check to be sure that it works with subdirectories, so that one html file is produced per subdirectory.

- Done (Colin) - Make a button/tool that creates a zipped archive of all the CellProfiler files (e.g. a 'snapshot' of the code that is currently being used). 

- Done (Colin) - In the SetPreferences button, fix the code for when the user does not have write access to the matlab root directory. There is a nice routine almost functional there, but it doesn't quite seem to do the right thing: try to write in matlab root first, and if that fails, write in the handles.Current.StartupDirectory) > Also, maybe we should change it so that the current directory it tries to write to is the handles.Current.default output directory, since presumably the user can write there.  That is where CellProfiler should look when trying to load the preferences upon launching, too, if we add this feature.

- Done (Colin) - In the SetPreferences button in CellProfiler.m, do some error checking to see whether items entered in edit boxes are valid.  For directories, check whether the directory exists and warn the user if it does not (although, still let the nonexistent directory be saved, because perhaps they are not connected to the network or something). For the default output directory, check whether the user has write permission to that directory and warn if not.  For the pixel size and font size, check whether the entry is a number (though I think it needs to be stored as a string within a cell) and revert to the previously saved value if it is not a number.

- Done (Joo Han) - Change Save Images as to be compatible with CreateWebPage - in order to do this, it needs to update the filenames after it saves them. In case there are any trouble caused by this, also add a option where the user can choose not to update filenames within CellProfiler.

- Done (Joo Han) - WriteSQL.m should enforce itself being the last module in the
pipeline, like CreateBatchScripts does (or second to last, if
CreateBatchScripts is last).

- Done (Joo Han) - For the SaveImageAs Imagetool, allow saving the data in the image as a variable called 'Image',  in .mat format.

- Done (Joo Han) - When attempting to Export data using any of the various
       data tools, add an error check in case the mat file does not
       contain the field "Measurements".

- Done (Joo Han) - When clicking on a module in the list box whose .m file no longer exists in the Modules directory, an error pops up saying the module no longer exists but that the settings will be shown anyway.  The settings are *not* shown in the window, because an error appears in the command window - undefined variable "flagExist" at line 1066.
Error in ==> CellProfiler>ModulePipelineListBox_Callback at 1062
  if ( ( length(VariableValuesString) > 13) | (flagExist))

- Done (Joo Han) - CellProfiler.m keeps track of time elapsed, broken down for each module, and has a display pop open at the end of a pipeline showing how long the first image set took and how long subsequent sets are taking.  Right now, the time is shown for *every* image set, whereas we only want two columns: the first image set, and then subsequent sets all averaged together.

- Done (Joo Han) - ++ Prevent clicking pause/cancel buttons twice in the timer window.

- Done (Joo Han) - It would be nice if clicking '+' to add a module to the pipeline added the module after the point you have highlighted in the pipeline, rather than always adding the new module to the end.

- I think the only way to do this is take away the ability to select multiple things, which isn't worth it. (Colin) - When viewing algorithms in the main GUI on the Mac platform, the down arrow should
       move from one highlighted algorithm to the next (right now, the
       dotted line highlighting moves but nothing happens).

- Done (Joo Han) Make all pop-up windows use the proper background color and
       come to the center of the CP window (helpdlg, warndlg, msgbox): (changed as center of screen, will need handles to get CP center..)
       requires getting the handle then setting the color and
       position. (Also, for the variablerevisionnumber window, set colors appropriately.)

        ***Please use CPhelpdlg and CPwarndlg from now on***


- Done (Colin) For the ExportData data tool, we would like to have the option of swapping rows and columns. Right now, measurements are across the columns and objects/images are the rows. We would like to add a checkbox that allows us to swap these.

- Done (Joo Han) 'Report bug' button in CellProfiler's main GUI. (in the Help menu) The function itself is also implemented. mail server needs to be automatically detected, though..

- Done (Joo Han) 'GetHistogram' module, which has various options to create a histogram and allows each histogram to be saved so that a movie can be created later.

- Done (Joo Han) Added a zip create and download feature to CreateWebPage module so that the user does not have to download image by image.

- Done (Joo Han) I think this was already done before but not removed from the list: Add Image set # to the display for AlgAlign.m (see other displays for the precise format).

- Done (Joo Han) Have image windows pay attention to aspect ratio of images. (Created a new function called CPFixAspectRatio.m which fixes the ratio for quadrant subplots, and made every module that uses quadrant subplots call this function. Not perfect, but much better than before. May also accommodate double subplots later)

- Done (Joo Han) 'Fetch new modules from website' button in CellProfiler's main GUI. (in the Help menu) 
The function itself is also implemented, although it may have to be revised. Right now it tries to connect to cellprofiler.org and tries to download ModuleList.txt, and download all the modules listed in that file if the module doesn't already exist.

- Done (Colin)- Be sure that all exporting tools will function properly if some
       measurement fields are left blank, which is the case when there
       are no objects in a particular image, for example.  This is particularly a concern when the last image had no objects, so make a fake image set with no objects in the last set and see if everything works.

- Done (Colin) - ExportData Data Tool: I would like Export Process Data to include all of the variable descriptions and variable values and variable revision numbers, as is currently created when using the Save Pipeline button (save as a text file option).

- Done (Colin) - - Use the User's preference for font size for all figure displays and dialog boxes.  Do this by adding this line:
	FontSize = get(0,'UserData');
After the line in the DISPLAY RESULTS section:
if any(findobj == ThisModuleFigureNumber) == 1
And then, for each subplot or text window, add this line:
    set(gca,'FontSize',FontSize)
For each title, add properties at the end:
    title('Original Image', 'FontSize', FontSize)
Also, ask Ola whether we should take out the old method of finding the preferred font size, which was FontSize = handles.Current.FontSize;  I would guess we probably should remove that to make it more consistent throughout the code. {NOT SURE IF THIS IS UP TO DATE... ASKED OLA AND HERE IS HIS RESPONSE:"it seems that the FontSize is still stored in UserData, and not in a UserData.FontSize. However, the fontsize is stored in the UserData for the 0-window, i.e. the main matlab window.
I've seen that there is a UserData.Application = 'CellProfiler' and so on now, but this is stored  in the UserData for other figure windows (i.e. with handles > 1). So right now there is
no conflict, but we should perhaps everything consistent."

- Done (Colin) - 
GUI 2 +++ Make image tools more accessible/intuitive:
Create an image toolbar to replace the drop down menu in the main CP GUI 
- The toolbar should have a horizontal orientation due to the drop down menu
- One row of tiny icon-buttons for standard image tools
- Below that, a drop down menu for infrequently used/custom tools
- Below that, a 'status line' of text that indicates which image will be acted on, and any further instruction if necessary during the running of the tool.
- We want to be able to close/open this toolbar, so there should be a button in the main CP GUI to "Show Image toolbar".  The Image toolbar should be close-able, but probably the normal window-closing functions are adequate - it doesn't need a hide/cancel button I don't think.
- When clicking on any image, have the toolbar become active/come to the top of all other windows.
For standard image tools:
[including: SaveImageAs, OpenNewImageFile, ShowPixelData, ShowHistogram, SaveToMatlabWorkspace, ShowImageInNewWindow]
- Have tooltips appear upon mouse-over of each button that show the name of the tool 
- Convert the tools that Ola wrote in ImageTool_Callbacks.m into separate m-files and add them to the ImageTools folder.
For infrequently used/custom tools:
[ShowDataOnImage, any other .m file in the ImageTools folder]
- Have any .m file in the ImageTools folder that does not have its own button appear in a drop down menu below the icon buttons.
- Make the help within each tool accessible somehow: maybe a '?' button that then asks you to select the tool you want help on (by clicking its icon or choosing it in the drop down menu).
Other implementation notes:
- replace imagesc throughout all CellProfiler, Modules, and Tools code with a new function to go in the main CellProfiler directory: CPimagesc.m, which should include this code:
ImageHandle  = imagesc(Image);
set(ImageHandle,'ButtonDownFcn','ImageTool(gco)')
This will be a simple string replacement of imagesc > CPimagesc to convert all the modules & tools, and it will be more fool-proof for when people write new code.  It might also give us the flexibility later on to do things like set other settings (like aspect ratio or font size) for every new axis produced.
- Possibly add DataTools to the same toolbar, just have it divided in half?
- To aid in interactive selection of settings, allow user to
       create a figure window where images can be dragged and overlaid
       and toggled back and forth. See Inca and dragndrop in Matlab
       Central.  Or, in the image toolbar for each figure window, have an 'Export to common window' button which puts the figure into a single, common window where you can pile up a bunch of images and toggle back and forth.

- Done (Colin) 
- Fix interactive zoom button (within Show Image button):
         (1) It seems to always work OK the first time you click on
     Interactive Zoom.  The subsequent times you click on it though:
     sometimes it works just fine and other times there is no change
     to the image itself - it stays at fully zoomed out and doesn't
     respond to mouse clicks.  Perhaps related, sometimes lots of
     errors are spit out at the command line (I think only on
     subsequent tries to use the functionality).  Actually, maybe it
     has something to do with having other figure windows open at the
     same time? 
         (2) Once things are working, I would like to add this
     Interactive Zoom button to several other places: In
     CellProfiler.m: "Display data on image", "Show pixel data", and
     all of the figure display windows (for each algorithm - I am not
     sure whether buttons will stay intact, though, once each
     algorithm runs. so I am not sure whether it makes more sense to
     have the button added within each algorithm's code or within the
     main CellProfiler code when the window is first created). The
     most important thing is to add the button to "AlgImageTiler.m";
     that is why I acquired this code in the first place.

- Done (Colin) - Many modules that load images from the hard drive use a 
subfunction called RetrieveImageFileNames, but it's slightly different when used in different contexts. It would be nice to consolidate at least part of this function into a standalone subfunction.  This allows people to change something like which file extensions are ignored in the one subfunction rather than every individual module.

- Done (Colin) - GUI 4 +++ For the + button (add a module to the pipeline), it currently asks you to choose a file in the modules folder. It would be nice if it determined which modules are of which variety (Identify, Measure, Other, etc) and presented them in a nice categorized way that's more user-friendly. See the ManualCompiler.m code in DeveloperScripts for example code for categorizing modules. (note: this might be a bit time consuming to extract all this information each time you want to add a module to the pipeline).

- Done (Joo Han) - Fix speed problem when CP is run with figures open, which occurs due to the fact that uicontrols which are created for each image set are never deleted.

- Done (Joo Han) - Make a module to expand or shrink secondary objects. (e.g. to define a membrane compartment). Test to be sure that downstream modules work on the newly defined region: measure, subtract from the original compartment, save images.

- Done (Joo Han) - Make a FilterObjectsAreaShape module that selects objects according to statistics obtained using MeasureAreaShape module. This module can be used, for example, to eliminate objects with a solidity below 0.5.

- Done (Joo Han) - Improve the response time of the main GUI - previously, toggling between modules was very slow, especially on macs. Through a significant infrastructure change that should be taken into account in future changes, an instantaneous module toggling was achieved. Common 99 VariableDescriptions and Boxes were used before - now, they are classified the module number. (handles.VariableDescription{ModuleNumber}(VariableNumber) and handles.VariableBox{ModuleNumber}(VariableNumber).

- Done (Joo Han) - Make the order of variable declarations consistent by always having %textVAR declared first. Before, either %infotypeVAR or %textVAR came first depending on the use of infotype. Relevant redundant calculations were removed and now CellProfiler.m will fail to read modules properly if %textVAR does not come first.

- Done (Joo Han) Have the save settings function automatically add SET to the  
       name > can't currently do it with uisave. (The user is prompted whether he really wants to do this, with Yes as default. This actually seemed like a better and easier solution since it allows more flexibility.)

- Done (Joo Han) - Created CPwaitbar which uses a waitbar with adjusted colors and applied the function accordingly for load pipeline.

- Done (Colin) - SpotIdentifier: We haven't checked this module in a while. Figure out Excel mac vs Pc problems (Anne has
       an email from Mathworks describing the issue, thread QW38).
       Allow asking if numbers are in rows or columns.  Check offsets,
       flipping. Display value only when clicking (see email that Anne
       has: Mathworks tricks for interactive figures). Make manual
       page. Toggle several images. In general, it just needs to be looked over and polished up.

- Done (Colin) - Decide about cutting down the name of modules.

- Done (Joo Han) - We should change the Identify modules and the SaveImages module so that if the user has chosen to save a label matrix image, the user has a choice between saving the grayscale label matrix (in which case they should be warned if they have more than 256 objects and if saving in 8 bit format), or a colored version, created using label2rgb on the spot in the SaveImages module rather than having the colored version saved to the handles structure by the Identify modules, which requires Variables in the Identify modules asking the user if they might want to save the images later in order to save processing time. >> It's possible that Anne already did some of this??

- Done (Joo Han) - Created and polished up IdentifyWellSpots.m, according to collaborators' request. I originally made this to be a stand-alone module, but this made it less flexible, so now it should be used with other modules, including FilterObjectsAreaShape.

- Done (Colin) - Scrollbar bug: To reproduce, add LoadImagesText and IdentifyPrimIntensIntens to the pipeline. Use the scrollbar in the IdentifyPrimIntensIntens module and then select LoadImagesText. The variable boxes will then be shifted for LoadImagesText too.

- Done (Colin) - Sometimes we save images (using the SaveImages module, for example) in matlab .mat format. We can then load them into CP using LoadSingleImage, but none of the other LoadImages modules, nor the OpenNewImageFile Image tool, nor CPimread itself have been adapted to read images stored in .mat files.

- Done (Colin) - For OpenNewImageFile Image tool, make use of CPimread's ability to tell us which files it can read when deciding what file types to display in the uigetfile line.  Right now, the file types are hard-coded.  Also, when the user is selecting a file format for images in, for example, the SaveImages module, currently the user types in the file format into the edit box. Can we make this a popupmenu whose choices are determined by the output of CPimread (with no arguments, CPimread tells us which file formats it can read)?

- Done (Colin) - Put in toggle buttons for red, green, and blue if an image is color.  Maybe in CPfigure, or maybe just in specific places like spot identifier.

- Done (Colin) - Update ExampleFlySettings - it's currently in pretty bad shape and uses some pretty old revisions of modules. Trying to load the current ExampleFlySettings revealed a potentially serious problem - with the new way of showing settings (drop down menus, etc), I think it makes it frequently fail to load old pipelines properly.  So we should figure out if we can make CellProfiler more robust to loading old pipelines, otherwise everything we've worked on up to this point is going to be un-loadable.

Done - Anne - SpotIdentifier is storing a value with the handles field named "ImageTopLeftXCorrectedGray" which should instead be stored in a subfield of "Image".