''' hdf5_dict -- HDF5-backed dictionary for Measurements.

This module implements the HDF5Dict class, which provides a dict-like
interface for measurements, backed by an HDF5 file.
'''

import h5py


class HDF5Dict():
    ''' The HDF5Dict can be used to store measurements at several
    hierarchical levels:

    measurements = HDFDict(hdf5_filename)
    
    # Experiment-level features
    measurements['Experiment', 'feature1'] = 'a'
    measurements['Experiment', 'feature2'] = 1
    
    # Image-level features
    measurements['Image', 'imfeature1', 1] = 'foo'
    measurements['Image', 'imfeature2', 1] = 5

    # Object-level features
    measurements['Object1', 'objfeature1', 1, :] = [1, 2, 3]
    measurements['Object1', 'objfeature2', 1, :] = [4.0, 5.0, 6.0]
    
    The first two axes are strings, all other are indices.
    Measurements can be fetched using indices, including slices in any
    but the first (object name) index, with the exptected results.  If
    the second axis (the feature column) is sliced, a structured array
    will be returned.

    Integers, floats, and strings can be stored in the measurments.

    Data can be removed with the del operator.

    Depending on the number of levels used to store measurements,
    several implicit index features will be included.  For Image-level
    features, an integer 'ImageNumber' with 0-based indexing will be
    included.  For Object and deeper levels, there will also be
    'ObjectNumber', 'SubObjectNumber', 'SubSubObjectNumber',
    etc. depending on the level.  When assigning to slices, these will
    be autogenerated according to the data length.

    It is an error to overwrite existing data, unless the 'overwrite'
    property is set on the measurements object.

    If the 'not_missing' flag is set, it is an error to add a new
    object or feature that does not exist.

    It is also an error to write different amounts of data for
    different features on the same object.

    # Assign 3 object measurements to Object1.objectfeature1:
    measurements['Object1', 'objfeature1', 1, :] = [1, 2, 3]
    # Error!  attempting to assign 4 measurements to the same object.
    measurements['Object1', 'objfeature2', 1, :] = [1, 2, 3, 4]
    
    '''

    def __init__(self, hdf5_filename):
        
